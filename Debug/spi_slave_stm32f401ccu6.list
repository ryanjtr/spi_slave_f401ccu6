
spi_slave_stm32f401ccu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002ddc  08002ddc  00003ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e50  08002e50  00004054  2**0
                  CONTENTS
  4 .ARM          00000008  08002e50  08002e50  00003e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e58  08002e58  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e5c  08002e5c  00003e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002e60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000054  08002eb4  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08002eb4  00004228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fd0  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001387  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e0  00000000  00000000  0000aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118d6  00000000  00000000  0000af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005772  00000000  00000000  0001c846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000626d4  00000000  00000000  00021fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008468c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002004  00000000  00000000  000846d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000866d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002dc4 	.word	0x08002dc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08002dc4 	.word	0x08002dc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	f003 0307 	and.w	r3, r3, #7
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db0b      	blt.n	800060e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 021f 	and.w	r2, r3, #31
 80005fc:	4907      	ldr	r1, [pc, #28]	@ (800061c <__NVIC_EnableIRQ+0x38>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	095b      	lsrs	r3, r3, #5
 8000604:	2001      	movs	r0, #1
 8000606:	fa00 f202 	lsl.w	r2, r0, r2
 800060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000e100 	.word	0xe000e100

08000620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	db0a      	blt.n	800064a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	490c      	ldr	r1, [pc, #48]	@ (800066c <__NVIC_SetPriority+0x4c>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	0112      	lsls	r2, r2, #4
 8000640:	b2d2      	uxtb	r2, r2
 8000642:	440b      	add	r3, r1
 8000644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000648:	e00a      	b.n	8000660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4908      	ldr	r1, [pc, #32]	@ (8000670 <__NVIC_SetPriority+0x50>)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f003 030f 	and.w	r3, r3, #15
 8000656:	3b04      	subs	r3, #4
 8000658:	0112      	lsls	r2, r2, #4
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	440b      	add	r3, r1
 800065e:	761a      	strb	r2, [r3, #24]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000674:	b480      	push	{r7}
 8000676:	b089      	sub	sp, #36	@ 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	f1c3 0307 	rsb	r3, r3, #7
 800068e:	2b04      	cmp	r3, #4
 8000690:	bf28      	it	cs
 8000692:	2304      	movcs	r3, #4
 8000694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3304      	adds	r3, #4
 800069a:	2b06      	cmp	r3, #6
 800069c:	d902      	bls.n	80006a4 <NVIC_EncodePriority+0x30>
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	e000      	b.n	80006a6 <NVIC_EncodePriority+0x32>
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43da      	mvns	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	401a      	ands	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006bc:	f04f 31ff 	mov.w	r1, #4294967295
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	fa01 f303 	lsl.w	r3, r1, r3
 80006c6:	43d9      	mvns	r1, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	4313      	orrs	r3, r2
         );
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3724      	adds	r7, #36	@ 0x24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <LL_RCC_HSI_Enable+0x1c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <LL_RCC_HSI_Enable+0x1c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <LL_RCC_HSI_IsReady+0x20>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	2b02      	cmp	r3, #2
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40023800 	.word	0x40023800

08000720 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4904      	ldr	r1, [pc, #16]	@ (8000748 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000736:	4313      	orrs	r3, r2
 8000738:	600b      	str	r3, [r1, #0]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <LL_RCC_SetSysClkSource+0x24>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f023 0203 	bic.w	r2, r3, #3
 800075c:	4904      	ldr	r1, [pc, #16]	@ (8000770 <LL_RCC_SetSysClkSource+0x24>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	608b      	str	r3, [r1, #8]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40023800 	.word	0x40023800

08000774 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <LL_RCC_GetSysClkSource+0x18>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f003 030c 	and.w	r3, r3, #12
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80007a0:	4904      	ldr	r1, [pc, #16]	@ (80007b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	608b      	str	r3, [r1, #8]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800

080007b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80007c8:	4904      	ldr	r1, [pc, #16]	@ (80007dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	608b      	str	r3, [r1, #8]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40023800 	.word	0x40023800

080007e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80007f0:	4904      	ldr	r1, [pc, #16]	@ (8000804 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	608b      	str	r3, [r1, #8]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40023800 	.word	0x40023800

08000808 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <LL_RCC_SetTIMPrescaler+0x28>)
 8000812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000816:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800081a:	4905      	ldr	r1, [pc, #20]	@ (8000830 <LL_RCC_SetTIMPrescaler+0x28>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4313      	orrs	r3, r2
 8000820:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40023800 	.word	0x40023800

08000834 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800083e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000840:	4907      	ldr	r1, [pc, #28]	@ (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800084a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <LL_APB1_GRP1_EnableClock+0x2c>)
 800086e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000870:	4907      	ldr	r1, [pc, #28]	@ (8000890 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <LL_APB1_GRP1_EnableClock+0x2c>)
 800087a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4013      	ands	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800

08000894 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800089e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008a0:	4907      	ldr	r1, [pc, #28]	@ (80008c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4013      	ands	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800

080008c4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <LL_SYSCFG_SetEXTISource+0x68>)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3302      	adds	r3, #2
 80008d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	0c1b      	lsrs	r3, r3, #16
 80008de:	43db      	mvns	r3, r3
 80008e0:	ea02 0103 	and.w	r1, r2, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0c1b      	lsrs	r3, r3, #16
 80008e8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	fa93 f3a3 	rbit	r3, r3
 80008f0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80008fc:	2320      	movs	r3, #32
 80008fe:	e003      	b.n	8000908 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fab3 f383 	clz	r3, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	461a      	mov	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	fa03 f202 	lsl.w	r2, r3, r2
 8000910:	4806      	ldr	r0, [pc, #24]	@ (800092c <LL_SYSCFG_SetEXTISource+0x68>)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	430a      	orrs	r2, r1
 8000918:	3302      	adds	r3, #2
 800091a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800091e:	bf00      	nop
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40013800 	.word	0x40013800

08000930 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <LL_FLASH_SetLatency+0x24>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 0207 	bic.w	r2, r3, #7
 8000940:	4904      	ldr	r1, [pc, #16]	@ (8000954 <LL_FLASH_SetLatency+0x24>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	600b      	str	r3, [r1, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40023c00 	.word	0x40023c00

08000958 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <LL_FLASH_GetLatency+0x18>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0307 	and.w	r3, r3, #7
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000984:	4904      	ldr	r1, [pc, #16]	@ (8000998 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4313      	orrs	r3, r2
 800098a:	600b      	str	r3, [r1, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40007000 	.word	0x40007000

0800099c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f023 0210 	bic.w	r2, r3, #16
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	605a      	str	r2, [r3, #4]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <LL_SPI_IsActiveFlag_RXNE+0x18>
 80009f6:	2301      	movs	r3, #1
 80009f8:	e000      	b.n	80009fc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d101      	bne.n	8000a20 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000a44:	68fb      	ldr	r3, [r7, #12]
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <LL_SPI_DisableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	605a      	str	r2, [r3, #4]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	330c      	adds	r3, #12
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	330c      	adds	r3, #12
 8000a9e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	78fa      	ldrb	r2, [r7, #3]
 8000aa4:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60da      	str	r2, [r3, #12]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	615a      	str	r2, [r3, #20]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b0e:	2b40      	cmp	r3, #64	@ 0x40
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b34:	2b80      	cmp	r3, #128	@ 0x80
 8000b36:	bf0c      	ite	eq
 8000b38:	2301      	moveq	r3, #1
 8000b3a:	2300      	movne	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000b56:	78fa      	ldrb	r2, [r7, #3]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	605a      	str	r2, [r3, #4]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b08b      	sub	sp, #44	@ 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa93 f3a3 	rbit	r3, r3
 8000b82:	613b      	str	r3, [r7, #16]
  return result;
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	e003      	b.n	8000b9a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	fab3 f383 	clz	r3, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	fa93 f3a3 	rbit	r3, r3
 8000bb0:	61fb      	str	r3, [r7, #28]
  return result;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000bbc:	2320      	movs	r3, #32
 8000bbe:	e003      	b.n	8000bc8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	fab3 f383 	clz	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	372c      	adds	r7, #44	@ 0x2c
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b08b      	sub	sp, #44	@ 0x2c
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	613b      	str	r3, [r7, #16]
  return result;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	e003      	b.n	8000c14 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fab3 f383 	clz	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2103      	movs	r1, #3
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	fa93 f3a3 	rbit	r3, r3
 8000c2a:	61fb      	str	r3, [r7, #28]
  return result;
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000c36:	2320      	movs	r3, #32
 8000c38:	e003      	b.n	8000c42 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	fab3 f383 	clz	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	60da      	str	r2, [r3, #12]
}
 8000c50:	bf00      	nop
 8000c52:	372c      	adds	r7, #44	@ 0x2c
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	041a      	lsls	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	619a      	str	r2, [r3, #24]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	041a      	lsls	r2, r3, #16
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43d9      	mvns	r1, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	400b      	ands	r3, r1
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	619a      	str	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000cb0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000cb4:	f7ff fdee 	bl	8000894 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000cb8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000cbc:	f7ff fdd2 	bl	8000864 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff fc5d 	bl	8000580 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 8000cc6:	f7ff fc7f 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2200      	movs	r2, #0
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fccf 	bl	8000674 <NVIC_EncodePriority>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 30ff 	mov.w	r0, #4294967295
 8000cde:	f7ff fc9f 	bl	8000620 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f815 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f8ff 	bl	8000ee8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cea:	f000 f84b 	bl	8000d84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cee:	f000 f8ab 	bl	8000e48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_printf("test uart printf\r\n");
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <main+0x5c>)
 8000cf4:	f000 fa04 	bl	8001100 <uart_printf>
  //  LL_SPI_EnableIT_TXE(SPI1);
  //  uint32_t rxdata[10] = {0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0, 0x11, 0x22};
  //  for(int i=0;i<10;i++)
  //	  uart_printf("rx_data=0x%02X\r\n",rxdata[i]);

  spi_receive_it(data, 100, 1000);
 8000cf8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cfc:	2164      	movs	r1, #100	@ 0x64
 8000cfe:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <main+0x60>)
 8000d00:	f000 fa1a 	bl	8001138 <spi_receive_it>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <main+0x58>
 8000d08:	08002ddc 	.word	0x08002ddc
 8000d0c:	20000070 	.word	0x20000070

08000d10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fe0b 	bl	8000930 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff fe1c 	bl	8000958 <LL_FLASH_GetLatency>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1fa      	bne.n	8000d1c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000d26:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d2a:	f7ff fe23 	bl	8000974 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f7ff fcf6 	bl	8000720 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000d34:	f7ff fcd2 	bl	80006dc <LL_RCC_HSI_Enable>

  /* Wait till HSI is ready */
  while (LL_RCC_HSI_IsReady() != 1)
 8000d38:	bf00      	nop
 8000d3a:	f7ff fcdf 	bl	80006fc <LL_RCC_HSI_IsReady>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d1fa      	bne.n	8000d3a <SystemClock_Config+0x2a>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000d44:	2080      	movs	r0, #128	@ 0x80
 8000d46:	f7ff fd23 	bl	8000790 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fd34 	bl	80007b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fd45 	bl	80007e0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fcf8 	bl	800074c <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000d5c:	bf00      	nop
 8000d5e:	f7ff fd09 	bl	8000774 <LL_RCC_GetSysClkSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1fa      	bne.n	8000d5e <SystemClock_Config+0x4e>
  {
  }
  LL_Init1msTick(8000000);
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <SystemClock_Config+0x70>)
 8000d6a:	f001 fb53 	bl	8002414 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000d6e:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <SystemClock_Config+0x70>)
 8000d70:	f001 fb5e 	bl	8002430 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fd47 	bl	8000808 <LL_RCC_SetTIMPrescaler>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	007a1200 	.word	0x007a1200

08000d84 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b090      	sub	sp, #64	@ 0x40
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d8a:	f107 0318 	add.w	r3, r7, #24
 8000d8e:	2228      	movs	r2, #40	@ 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fb96 	bl	80024c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000da8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000dac:	f7ff fd72 	bl	8000894 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff fd3f 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8000db6:	23e0      	movs	r3, #224	@ 0xe0
 8000db8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481b      	ldr	r0, [pc, #108]	@ (8000e40 <MX_SPI1_Init+0xbc>)
 8000dd4:	f000 fe06 	bl	80019e4 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8000dd8:	f7ff fbf6 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc46 	bl	8000674 <NVIC_EncodePriority>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4619      	mov	r1, r3
 8000dec:	2023      	movs	r0, #35	@ 0x23
 8000dee:	f7ff fc17 	bl	8000620 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8000df2:	2023      	movs	r0, #35	@ 0x23
 8000df4:	f7ff fbf6 	bl	80005e4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_SLAVE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <MX_SPI1_Init+0xc0>)
 8000e26:	f000 ffbc 	bl	8001da2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_SPI1_Init+0xc0>)
 8000e2e:	f7ff fdc5 	bl	80009bc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8000e32:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_SPI1_Init+0xc0>)
 8000e34:	f7ff fdb2 	bl	800099c <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */
  //  LL_SPI_SetDataWidth(SPI1, LL_SPI_DATAWIDTH_16BIT);
}
 8000e38:	bf00      	nop
 8000e3a:	3740      	adds	r7, #64	@ 0x40
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40013000 	.word	0x40013000

08000e48 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000e72:	2010      	movs	r0, #16
 8000e74:	f7ff fd0e 	bl	8000894 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff fcdb 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 8000e7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e94:	2307      	movs	r3, #7
 8000e96:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4810      	ldr	r0, [pc, #64]	@ (8000ee0 <MX_USART1_UART_Init+0x98>)
 8000e9e:	f000 fda1 	bl	80019e4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ea2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000ea6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_USART1_UART_Init+0x9c>)
 8000ec8:	f001 fa26 	bl	8002318 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <MX_USART1_UART_Init+0x9c>)
 8000ece:	f7ff fe00 	bl	8000ad2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000ed2:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_USART1_UART_Init+0x9c>)
 8000ed4:	f7ff fded 	bl	8000ab2 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000ed8:	bf00      	nop
 8000eda:	3738      	adds	r7, #56	@ 0x38
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40011000 	.word	0x40011000

08000ee8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f7ff fc93 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000f0e:	2080      	movs	r0, #128	@ 0x80
 8000f10:	f7ff fc90 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fc8d 	bl	8000834 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f7ff fc8a 	bl	8000834 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f24:	485a      	ldr	r0, [pc, #360]	@ (8001090 <MX_GPIO_Init+0x1a8>)
 8000f26:	f7ff fe99 	bl	8000c5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED_SLAVE_1_Pin | LED_SLAVE_2_Pin | LED_SLAVE_3_Pin | LED_SLAVE_4_Pin);
 8000f2a:	2178      	movs	r1, #120	@ 0x78
 8000f2c:	4859      	ldr	r0, [pc, #356]	@ (8001094 <MX_GPIO_Init+0x1ac>)
 8000f2e:	f7ff fe95 	bl	8000c5c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000f32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f36:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4850      	ldr	r0, [pc, #320]	@ (8001090 <MX_GPIO_Init+0x1a8>)
 8000f4e:	f000 fd49 	bl	80019e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_SLAVE_1_Pin | LED_SLAVE_2_Pin | LED_SLAVE_3_Pin | LED_SLAVE_4_Pin;
 8000f52:	2378      	movs	r3, #120	@ 0x78
 8000f54:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f56:	2301      	movs	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	484a      	ldr	r0, [pc, #296]	@ (8001094 <MX_GPIO_Init+0x1ac>)
 8000f6c:	f000 fd3a 	bl	80019e4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 8000f70:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fca5 	bl	80008c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8000f7a:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fca0 	bl	80008c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000f84:	f04f 4170 	mov.w	r1, #4026531840	@ 0xf0000000
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fc9b 	bl	80008c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE4);
 8000f8e:	4942      	ldr	r1, [pc, #264]	@ (8001098 <MX_GPIO_Init+0x1b0>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff fc97 	bl	80008c4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fb50 	bl	8001650 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fb43 	bl	8001650 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fb36 	bl	8001650 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ff4:	f107 0318 	add.w	r3, r7, #24
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fb29 	bl	8001650 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(CS1_GPIO_Port, CS1_Pin, LL_GPIO_PULL_UP);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2102      	movs	r1, #2
 8001002:	4826      	ldr	r0, [pc, #152]	@ (800109c <MX_GPIO_Init+0x1b4>)
 8001004:	f7ff fded 	bl	8000be2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(CS2_GPIO_Port, CS2_Pin, LL_GPIO_PULL_UP);
 8001008:	2201      	movs	r2, #1
 800100a:	2104      	movs	r1, #4
 800100c:	4823      	ldr	r0, [pc, #140]	@ (800109c <MX_GPIO_Init+0x1b4>)
 800100e:	f7ff fde8 	bl	8000be2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(CS3_GPIO_Port, CS3_Pin, LL_GPIO_PULL_UP);
 8001012:	2201      	movs	r2, #1
 8001014:	2108      	movs	r1, #8
 8001016:	4821      	ldr	r0, [pc, #132]	@ (800109c <MX_GPIO_Init+0x1b4>)
 8001018:	f7ff fde3 	bl	8000be2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(CS4_GPIO_Port, CS4_Pin, LL_GPIO_PULL_UP);
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	@ (800109c <MX_GPIO_Init+0x1b4>)
 8001022:	f7ff fdde 	bl	8000be2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(CS1_GPIO_Port, CS1_Pin, LL_GPIO_MODE_INPUT);
 8001026:	2200      	movs	r2, #0
 8001028:	2102      	movs	r1, #2
 800102a:	481c      	ldr	r0, [pc, #112]	@ (800109c <MX_GPIO_Init+0x1b4>)
 800102c:	f7ff fd9c 	bl	8000b68 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(CS2_GPIO_Port, CS2_Pin, LL_GPIO_MODE_INPUT);
 8001030:	2200      	movs	r2, #0
 8001032:	2104      	movs	r1, #4
 8001034:	4819      	ldr	r0, [pc, #100]	@ (800109c <MX_GPIO_Init+0x1b4>)
 8001036:	f7ff fd97 	bl	8000b68 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(CS3_GPIO_Port, CS3_Pin, LL_GPIO_MODE_INPUT);
 800103a:	2200      	movs	r2, #0
 800103c:	2108      	movs	r1, #8
 800103e:	4817      	ldr	r0, [pc, #92]	@ (800109c <MX_GPIO_Init+0x1b4>)
 8001040:	f7ff fd92 	bl	8000b68 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(CS4_GPIO_Port, CS4_Pin, LL_GPIO_MODE_INPUT);
 8001044:	2200      	movs	r2, #0
 8001046:	2110      	movs	r1, #16
 8001048:	4814      	ldr	r0, [pc, #80]	@ (800109c <MX_GPIO_Init+0x1b4>)
 800104a:	f7ff fd8d 	bl	8000b68 <LL_GPIO_SetPinMode>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  NVIC_SetPriority(EXTI1_IRQn, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	2007      	movs	r0, #7
 8001052:	f7ff fae5 	bl	8000620 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001056:	2007      	movs	r0, #7
 8001058:	f7ff fac4 	bl	80005e4 <__NVIC_EnableIRQ>

  NVIC_SetPriority(EXTI2_IRQn, 0);
 800105c:	2100      	movs	r1, #0
 800105e:	2008      	movs	r0, #8
 8001060:	f7ff fade 	bl	8000620 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001064:	2008      	movs	r0, #8
 8001066:	f7ff fabd 	bl	80005e4 <__NVIC_EnableIRQ>

  NVIC_SetPriority(EXTI3_IRQn, 0);
 800106a:	2100      	movs	r1, #0
 800106c:	2009      	movs	r0, #9
 800106e:	f7ff fad7 	bl	8000620 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8001072:	2009      	movs	r0, #9
 8001074:	f7ff fab6 	bl	80005e4 <__NVIC_EnableIRQ>

  NVIC_SetPriority(EXTI4_IRQn, 0);
 8001078:	2100      	movs	r1, #0
 800107a:	200a      	movs	r0, #10
 800107c:	f7ff fad0 	bl	8000620 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8001080:	200a      	movs	r0, #10
 8001082:	f7ff faaf 	bl	80005e4 <__NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020800 	.word	0x40020800
 8001094:	40020400 	.word	0x40020400
 8001098:	000f0001 	.word	0x000f0001
 800109c:	40020000 	.word	0x40020000

080010a0 <uart_print>:

/* USER CODE BEGIN 4 */
void uart_print(const char *str)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t length = strlen(str);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff f899 	bl	80001e0 <strlen>
 80010ae:	60b8      	str	r0, [r7, #8]
  for (uint32_t i = 0; i < length; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e011      	b.n	80010da <uart_print+0x3a>
  {
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 80010b6:	bf00      	nop
 80010b8:	4810      	ldr	r0, [pc, #64]	@ (80010fc <uart_print+0x5c>)
 80010ba:	f7ff fd33 	bl	8000b24 <LL_USART_IsActiveFlag_TXE>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f9      	beq.n	80010b8 <uart_print+0x18>
      ;
    LL_USART_TransmitData8(USART1, (uint8_t)str[i]);
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	@ (80010fc <uart_print+0x5c>)
 80010d0:	f7ff fd3b 	bl	8000b4a <LL_USART_TransmitData8>
  for (uint32_t i = 0; i < length; i++)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3e9      	bcc.n	80010b6 <uart_print+0x16>
  }
  while (!LL_USART_IsActiveFlag_TC(USART1))
 80010e2:	bf00      	nop
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <uart_print+0x5c>)
 80010e6:	f7ff fd0a 	bl	8000afe <LL_USART_IsActiveFlag_TC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f9      	beq.n	80010e4 <uart_print+0x44>
    ;
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40011000 	.word	0x40011000

08001100 <uart_printf>:

void uart_printf(const char *format, ...)
{
 8001100:	b40f      	push	{r0, r1, r2, r3}
 8001102:	b580      	push	{r7, lr}
 8001104:	b0a2      	sub	sp, #136	@ 0x88
 8001106:	af00      	add	r7, sp, #0
  char buffer[128];
  va_list args;
  va_start(args, format);
 8001108:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800110c:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args); // Use vsnprintf to format string
 800110e:	f107 0008 	add.w	r0, r7, #8
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	f001 f9c5 	bl	80024a8 <vsniprintf>
  va_end(args);
  uart_print(buffer);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffbc 	bl	80010a0 <uart_print>
}
 8001128:	bf00      	nop
 800112a:	3788      	adds	r7, #136	@ 0x88
 800112c:	46bd      	mov	sp, r7
 800112e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001132:	b004      	add	sp, #16
 8001134:	4770      	bx	lr
	...

08001138 <spi_receive_it>:

bool spi_receive_it(uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]
  uint32_t count = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  global_rxdata = pData;
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <spi_receive_it+0x70>)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6013      	str	r3, [r2, #0]
  global_rxlen = len;
 8001150:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <spi_receive_it+0x74>)
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	7013      	strb	r3, [r2, #0]
  global_rxindex = 0; // �?ặt lại chỉ số toàn cục
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <spi_receive_it+0x78>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
                      // Ch�? c�? BUSY tắt
  while (SPI1->SR & SPI_SR_BSY)
 800115c:	e008      	b.n	8001170 <spi_receive_it+0x38>
  {
    if (count > timeout)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	d901      	bls.n	800116a <spi_receive_it+0x32>
    {
      return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e018      	b.n	800119c <spi_receive_it+0x64>
    }
    else
      count++;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  while (SPI1->SR & SPI_SR_BSY)
 8001170:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <spi_receive_it+0x7c>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <spi_receive_it+0x26>
  }
  // Bật ngoại vi SPI
  SPI1->CR1 |= SPI_CR1_SPE;
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <spi_receive_it+0x7c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <spi_receive_it+0x7c>)
 8001182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001186:	6013      	str	r3, [r2, #0]
  // Bật bộ đệm ngắt
  SPI1->CR2 |= SPI_CR2_RXNEIE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <spi_receive_it+0x7c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <spi_receive_it+0x7c>)
 800118e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001192:	6053      	str	r3, [r2, #4]

  // Truy�?n byte rác ra
  SPI1->DR = 0xFF;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <spi_receive_it+0x7c>)
 8001196:	22ff      	movs	r2, #255	@ 0xff
 8001198:	60da      	str	r2, [r3, #12]

  return true;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200000d4 	.word	0x200000d4
 80011ac:	200000d9 	.word	0x200000d9
 80011b0:	200000d8 	.word	0x200000d8
 80011b4:	40013000 	.word	0x40013000

080011b8 <process_irq_spi1>:
void process_irq_spi1(void)
{
 80011b8:	b598      	push	{r3, r4, r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  // Kiểm tra ngắt RXNE (Nhận dữ liệu)
  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 80011bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c0:	481e      	ldr	r0, [pc, #120]	@ (800123c <process_irq_spi1+0x84>)
 80011c2:	f7ff fd5a 	bl	8000c7a <LL_GPIO_TogglePin>
  // Ngắt nhận không chạy được
  if (LL_SPI_IsActiveFlag_RXNE(SPI1))
 80011c6:	481e      	ldr	r0, [pc, #120]	@ (8001240 <process_irq_spi1+0x88>)
 80011c8:	f7ff fc0b 	bl	80009e2 <LL_SPI_IsActiveFlag_RXNE>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d032      	beq.n	8001238 <process_irq_spi1+0x80>
  {
    if (global_rxindex >= global_rxlen)
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <process_irq_spi1+0x8c>)
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <process_irq_spi1+0x90>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d306      	bcc.n	80011ec <process_irq_spi1+0x34>
    {
      // Tắt ngắt bộ đệm truy�?n
      LL_SPI_DisableIT_RXNE(SPI1);
 80011de:	4818      	ldr	r0, [pc, #96]	@ (8001240 <process_irq_spi1+0x88>)
 80011e0:	f7ff fc37 	bl	8000a52 <LL_SPI_DisableIT_RXNE>

      // Xóa c�? OVERRUN bằng cách đ�?c DR và SR
      LL_SPI_ClearFlag_OVR(SPI1);
 80011e4:	4816      	ldr	r0, [pc, #88]	@ (8001240 <process_irq_spi1+0x88>)
 80011e6:	f7ff fc22 	bl	8000a2e <LL_SPI_ClearFlag_OVR>
      uart_printf("rxdata[%d]=0x%02X\r\n", global_rxindex, data[global_rxindex]);
      global_rxindex++;
      LL_SPI_TransmitData8(SPI1, 0xDB);
    }
  }
}
 80011ea:	e025      	b.n	8001238 <process_irq_spi1+0x80>
    else if (LL_SPI_IsActiveFlag_TXE(SPI1))
 80011ec:	4814      	ldr	r0, [pc, #80]	@ (8001240 <process_irq_spi1+0x88>)
 80011ee:	f7ff fc0b 	bl	8000a08 <LL_SPI_IsActiveFlag_TXE>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01f      	beq.n	8001238 <process_irq_spi1+0x80>
      global_rxdata[global_rxindex] = LL_SPI_ReceiveData8(SPI1);
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <process_irq_spi1+0x94>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <process_irq_spi1+0x8c>)
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	189c      	adds	r4, r3, r2
 8001202:	480f      	ldr	r0, [pc, #60]	@ (8001240 <process_irq_spi1+0x88>)
 8001204:	f7ff fc35 	bl	8000a72 <LL_SPI_ReceiveData8>
 8001208:	4603      	mov	r3, r0
 800120a:	7023      	strb	r3, [r4, #0]
      uart_printf("rxdata[%d]=0x%02X\r\n", global_rxindex, data[global_rxindex]);
 800120c:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <process_irq_spi1+0x8c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <process_irq_spi1+0x8c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <process_irq_spi1+0x98>)
 800121a:	5c9b      	ldrb	r3, [r3, r2]
 800121c:	461a      	mov	r2, r3
 800121e:	480d      	ldr	r0, [pc, #52]	@ (8001254 <process_irq_spi1+0x9c>)
 8001220:	f7ff ff6e 	bl	8001100 <uart_printf>
      global_rxindex++;
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <process_irq_spi1+0x8c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <process_irq_spi1+0x8c>)
 800122e:	701a      	strb	r2, [r3, #0]
      LL_SPI_TransmitData8(SPI1, 0xDB);
 8001230:	21db      	movs	r1, #219	@ 0xdb
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <process_irq_spi1+0x88>)
 8001234:	f7ff fc2b 	bl	8000a8e <LL_SPI_TransmitData8>
}
 8001238:	bf00      	nop
 800123a:	bd98      	pop	{r3, r4, r7, pc}
 800123c:	40020800 	.word	0x40020800
 8001240:	40013000 	.word	0x40013000
 8001244:	200000d8 	.word	0x200000d8
 8001248:	200000d9 	.word	0x200000d9
 800124c:	200000d4 	.word	0x200000d4
 8001250:	20000070 	.word	0x20000070
 8001254:	08002df0 	.word	0x08002df0

08001258 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4013      	ands	r3, r2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40013c00 	.word	0x40013c00

08001284 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800128c:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6153      	str	r3, [r2, #20]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <LL_GPIO_IsInputPinSet>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	4013      	ands	r3, r2
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d2:	bf00      	nop
 80012d4:	e7fd      	b.n	80012d2 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	bf00      	nop
 80012dc:	e7fd      	b.n	80012da <HardFault_Handler+0x4>

080012de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <BusFault_Handler+0x4>

080012ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f2:	bf00      	nop
 80012f4:	e7fd      	b.n	80012f2 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
  process_irq_spi1();
 8001332:	f7ff ff41 	bl	80011b8 <process_irq_spi1>
  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI1_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    // Kiểm tra nếu c�? ngắt EXTI1 đã được set
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff ff89 	bl	8001258 <LL_EXTI_IsActiveFlag_0_31>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d016      	beq.n	800137a <EXTI1_IRQHandler+0x3e>
    {
    	if(LL_GPIO_IsInputPinSet(CS1_GPIO_Port, CS1_Pin))
 800134c:	2102      	movs	r1, #2
 800134e:	480c      	ldr	r0, [pc, #48]	@ (8001380 <EXTI1_IRQHandler+0x44>)
 8001350:	f7ff ffa8 	bl	80012a4 <LL_GPIO_IsInputPinSet>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <EXTI1_IRQHandler+0x2c>
    		SPI1->CR1 &= ~SPI_CR1_SSI;
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <EXTI1_IRQHandler+0x48>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <EXTI1_IRQHandler+0x48>)
 8001360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e005      	b.n	8001374 <EXTI1_IRQHandler+0x38>
    	else
    	{
    		SPI1->CR1 |= SPI_CR1_SSI;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <EXTI1_IRQHandler+0x48>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <EXTI1_IRQHandler+0x48>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001372:	6013      	str	r3, [r2, #0]
//    		slave_choice(1);
    	}
    		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff ff85 	bl	8001284 <LL_EXTI_ClearFlag_0_31>
    }
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020000 	.word	0x40020000
 8001384:	40013000 	.word	0x40013000

08001388 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 800138c:	2004      	movs	r0, #4
 800138e:	f7ff ff63 	bl	8001258 <LL_EXTI_IsActiveFlag_0_31>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d016      	beq.n	80013c6 <EXTI2_IRQHandler+0x3e>
    {
    	if(LL_GPIO_IsInputPinSet(CS2_GPIO_Port, CS2_Pin))
 8001398:	2104      	movs	r1, #4
 800139a:	480c      	ldr	r0, [pc, #48]	@ (80013cc <EXTI2_IRQHandler+0x44>)
 800139c:	f7ff ff82 	bl	80012a4 <LL_GPIO_IsInputPinSet>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <EXTI2_IRQHandler+0x2c>
    		SPI1->CR1 &= ~SPI_CR1_SSI;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <EXTI2_IRQHandler+0x48>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <EXTI2_IRQHandler+0x48>)
 80013ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e005      	b.n	80013c0 <EXTI2_IRQHandler+0x38>
    	else
    	{
    		SPI1->CR1 |= SPI_CR1_SSI;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <EXTI2_IRQHandler+0x48>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <EXTI2_IRQHandler+0x48>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013be:	6013      	str	r3, [r2, #0]
//    		slave_choice(2);
    	}


        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80013c0:	2004      	movs	r0, #4
 80013c2:	f7ff ff5f 	bl	8001284 <LL_EXTI_ClearFlag_0_31>
    }
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40013000 	.word	0x40013000

080013d4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3))
 80013d8:	2008      	movs	r0, #8
 80013da:	f7ff ff3d 	bl	8001258 <LL_EXTI_IsActiveFlag_0_31>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <EXTI3_IRQHandler+0x16>
//
////    		slave_choice(3);
//    	}


        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80013e4:	2008      	movs	r0, #8
 80013e6:	f7ff ff4d 	bl	8001284 <LL_EXTI_ClearFlag_0_31>
    }
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4))
 80013f4:	2010      	movs	r0, #16
 80013f6:	f7ff ff2f 	bl	8001258 <LL_EXTI_IsActiveFlag_0_31>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d016      	beq.n	800142e <EXTI4_IRQHandler+0x3e>
    {
    	if(LL_GPIO_IsInputPinSet(CS4_GPIO_Port, CS4_Pin))
 8001400:	2110      	movs	r1, #16
 8001402:	480c      	ldr	r0, [pc, #48]	@ (8001434 <EXTI4_IRQHandler+0x44>)
 8001404:	f7ff ff4e 	bl	80012a4 <LL_GPIO_IsInputPinSet>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <EXTI4_IRQHandler+0x2c>
    		SPI1->CR1 &= ~SPI_CR1_SSI;
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <EXTI4_IRQHandler+0x48>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <EXTI4_IRQHandler+0x48>)
 8001414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e005      	b.n	8001428 <EXTI4_IRQHandler+0x38>
    	else
    	{
    		SPI1->CR1 |= SPI_CR1_SSI;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <EXTI4_IRQHandler+0x48>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <EXTI4_IRQHandler+0x48>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001426:	6013      	str	r3, [r2, #0]
//    		slave_choice(4);
    	}
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8001428:	2010      	movs	r0, #16
 800142a:	f7ff ff2b 	bl	8001284 <LL_EXTI_ClearFlag_0_31>
    }
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40020000 	.word	0x40020000
 8001438:	40013000 	.word	0x40013000

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f001 f832 	bl	80024d4 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20010000 	.word	0x20010000
 800149c:	00000400 	.word	0x00000400
 80014a0:	200000dc 	.word	0x200000dc
 80014a4:	20000228 	.word	0x20000228

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014d0:	f7ff ffea 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f000 fff1 	bl	80024e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fbd5 	bl	8000cac <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001510:	08002e60 	.word	0x08002e60
  ldr r2, =_sbss
 8001514:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001518:	20000228 	.word	0x20000228

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <LL_EXTI_EnableIT_0_31>:
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <LL_EXTI_EnableIT_0_31+0x20>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4904      	ldr	r1, [pc, #16]	@ (8001540 <LL_EXTI_EnableIT_0_31+0x20>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40013c00 	.word	0x40013c00

08001544 <LL_EXTI_DisableIT_0_31>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <LL_EXTI_DisableIT_0_31+0x24>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	43db      	mvns	r3, r3
 8001554:	4904      	ldr	r1, [pc, #16]	@ (8001568 <LL_EXTI_DisableIT_0_31+0x24>)
 8001556:	4013      	ands	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40013c00 	.word	0x40013c00

0800156c <LL_EXTI_EnableEvent_0_31>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4904      	ldr	r1, [pc, #16]	@ (800158c <LL_EXTI_EnableEvent_0_31+0x20>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40013c00 	.word	0x40013c00

08001590 <LL_EXTI_DisableEvent_0_31>:
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4904      	ldr	r1, [pc, #16]	@ (80015b4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4904      	ldr	r1, [pc, #16]	@ (80015d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40013c00 	.word	0x40013c00

080015dc <LL_EXTI_DisableRisingTrig_0_31>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4904      	ldr	r1, [pc, #16]	@ (8001600 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40013c00 	.word	0x40013c00

08001604 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	4904      	ldr	r1, [pc, #16]	@ (8001624 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4313      	orrs	r3, r2
 8001616:	60cb      	str	r3, [r1, #12]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40013c00 	.word	0x40013c00

08001628 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	43db      	mvns	r3, r3
 8001638:	4904      	ldr	r1, [pc, #16]	@ (800164c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800163a:	4013      	ands	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40013c00 	.word	0x40013c00

08001650 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	791b      	ldrb	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d065      	beq.n	8001730 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d06b      	beq.n	8001744 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d01c      	beq.n	80016ae <LL_EXTI_Init+0x5e>
 8001674:	2b02      	cmp	r3, #2
 8001676:	dc25      	bgt.n	80016c4 <LL_EXTI_Init+0x74>
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <LL_EXTI_Init+0x32>
 800167c:	2b01      	cmp	r3, #1
 800167e:	d00b      	beq.n	8001698 <LL_EXTI_Init+0x48>
 8001680:	e020      	b.n	80016c4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff82 	bl	8001590 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff45 	bl	8001520 <LL_EXTI_EnableIT_0_31>
          break;
 8001696:	e018      	b.n	80016ca <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff51 	bl	8001544 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff60 	bl	800156c <LL_EXTI_EnableEvent_0_31>
          break;
 80016ac:	e00d      	b.n	80016ca <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff34 	bl	8001520 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff55 	bl	800156c <LL_EXTI_EnableEvent_0_31>
          break;
 80016c2:	e002      	b.n	80016ca <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
          break;
 80016c8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	799b      	ldrb	r3, [r3, #6]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d038      	beq.n	8001744 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	799b      	ldrb	r3, [r3, #6]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d01c      	beq.n	8001714 <LL_EXTI_Init+0xc4>
 80016da:	2b03      	cmp	r3, #3
 80016dc:	dc25      	bgt.n	800172a <LL_EXTI_Init+0xda>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d002      	beq.n	80016e8 <LL_EXTI_Init+0x98>
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d00b      	beq.n	80016fe <LL_EXTI_Init+0xae>
 80016e6:	e020      	b.n	800172a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff9b 	bl	8001628 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff5e 	bl	80015b8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80016fc:	e022      	b.n	8001744 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff6a 	bl	80015dc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff79 	bl	8001604 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001712:	e017      	b.n	8001744 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff4d 	bl	80015b8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff6e 	bl	8001604 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001728:	e00c      	b.n	8001744 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
            break;
 800172e:	e009      	b.n	8001744 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff05 	bl	8001544 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff26 	bl	8001590 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <LL_GPIO_SetPinMode>:
{
 800174e:	b480      	push	{r7}
 8001750:	b08b      	sub	sp, #44	@ 0x2c
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	613b      	str	r3, [r7, #16]
  return result;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001774:	2320      	movs	r3, #32
 8001776:	e003      	b.n	8001780 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2103      	movs	r1, #3
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	401a      	ands	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	61fb      	str	r3, [r7, #28]
  return result;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80017a2:	2320      	movs	r3, #32
 80017a4:	e003      	b.n	80017ae <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	bf00      	nop
 80017be:	372c      	adds	r7, #44	@ 0x2c
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_GPIO_SetPinOutputType>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	431a      	orrs	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_GPIO_SetPinSpeed>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b08b      	sub	sp, #44	@ 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	613b      	str	r3, [r7, #16]
  return result;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800181e:	2320      	movs	r3, #32
 8001820:	e003      	b.n	800182a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2103      	movs	r1, #3
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	401a      	ands	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	61fb      	str	r3, [r7, #28]
  return result;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800184c:	2320      	movs	r3, #32
 800184e:	e003      	b.n	8001858 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	609a      	str	r2, [r3, #8]
}
 8001866:	bf00      	nop
 8001868:	372c      	adds	r7, #44	@ 0x2c
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_GPIO_SetPinPull>:
{
 8001872:	b480      	push	{r7}
 8001874:	b08b      	sub	sp, #44	@ 0x2c
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	613b      	str	r3, [r7, #16]
  return result;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001898:	2320      	movs	r3, #32
 800189a:	e003      	b.n	80018a4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2103      	movs	r1, #3
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	401a      	ands	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	61fb      	str	r3, [r7, #28]
  return result;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80018c6:	2320      	movs	r3, #32
 80018c8:	e003      	b.n	80018d2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	431a      	orrs	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	60da      	str	r2, [r3, #12]
}
 80018e0:	bf00      	nop
 80018e2:	372c      	adds	r7, #44	@ 0x2c
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_GPIO_SetAFPin_0_7>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b08b      	sub	sp, #44	@ 0x2c
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	613b      	str	r3, [r7, #16]
  return result;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001912:	2320      	movs	r3, #32
 8001914:	e003      	b.n	800191e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	210f      	movs	r1, #15
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	61fb      	str	r3, [r7, #28]
  return result;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001940:	2320      	movs	r3, #32
 8001942:	e003      	b.n	800194c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	621a      	str	r2, [r3, #32]
}
 800195a:	bf00      	nop
 800195c:	372c      	adds	r7, #44	@ 0x2c
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_GPIO_SetAFPin_8_15>:
{
 8001966:	b480      	push	{r7}
 8001968:	b08b      	sub	sp, #44	@ 0x2c
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	613b      	str	r3, [r7, #16]
  return result;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e003      	b.n	800199a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	210f      	movs	r1, #15
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	401a      	ands	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	61fb      	str	r3, [r7, #28]
  return result;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e003      	b.n	80019ca <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80019d8:	bf00      	nop
 80019da:	372c      	adds	r7, #44	@ 0x2c
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	617b      	str	r3, [r7, #20]
  return result;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <LL_GPIO_Init+0x2e>
    return 32U;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e003      	b.n	8001a1a <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a1c:	e057      	b.n	8001ace <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2101      	movs	r1, #1
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d049      	beq.n	8001ac8 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d003      	beq.n	8001a44 <LL_GPIO_Init+0x60>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d10d      	bne.n	8001a60 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6a39      	ldr	r1, [r7, #32]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fed3 	bl	80017f8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	461a      	mov	r2, r3
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff feb4 	bl	80017c8 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6a39      	ldr	r1, [r7, #32]
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff02 	bl	8001872 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d121      	bne.n	8001aba <LL_GPIO_Init+0xd6>
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	60bb      	str	r3, [r7, #8]
  return result;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <LL_GPIO_Init+0xac>
    return 32U;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	e003      	b.n	8001a98 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d807      	bhi.n	8001aac <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6a39      	ldr	r1, [r7, #32]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff21 	bl	80018ec <LL_GPIO_SetAFPin_0_7>
 8001aaa:	e006      	b.n	8001aba <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6a39      	ldr	r1, [r7, #32]
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff56 	bl	8001966 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6a39      	ldr	r1, [r7, #32]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fe43 	bl	800174e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	3301      	adds	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1a0      	bne.n	8001a1e <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3728      	adds	r7, #40	@ 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <LL_RCC_GetSysClkSource>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <LL_RCC_GetSysClkSource+0x18>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <LL_RCC_GetAHBPrescaler>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <LL_RCC_GetAHBPrescaler+0x18>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <LL_RCC_GetAPB1Prescaler>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <LL_RCC_GetAPB2Prescaler>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <LL_RCC_PLL_GetMainSource+0x18>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <LL_RCC_PLL_GetN+0x18>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40023800 	.word	0x40023800

08001b90 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <LL_RCC_PLL_GetP+0x18>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <LL_RCC_PLL_GetDivider+0x18>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001bd0:	f000 f820 	bl	8001c14 <RCC_GetSystemClockFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f840 	bl	8001c64 <RCC_GetHCLKClockFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f84e 	bl	8001c90 <RCC_GetPCLK1ClockFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f85a 	bl	8001cb8 <RCC_GetPCLK2ClockFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60da      	str	r2, [r3, #12]
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001c1e:	f7ff ff63 	bl	8001ae8 <LL_RCC_GetSysClkSource>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d00c      	beq.n	8001c42 <RCC_GetSystemClockFreq+0x2e>
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d80f      	bhi.n	8001c4c <RCC_GetSystemClockFreq+0x38>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <RCC_GetSystemClockFreq+0x22>
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d003      	beq.n	8001c3c <RCC_GetSystemClockFreq+0x28>
 8001c34:	e00a      	b.n	8001c4c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <RCC_GetSystemClockFreq+0x48>)
 8001c38:	607b      	str	r3, [r7, #4]
      break;
 8001c3a:	e00a      	b.n	8001c52 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <RCC_GetSystemClockFreq+0x4c>)
 8001c3e:	607b      	str	r3, [r7, #4]
      break;
 8001c40:	e007      	b.n	8001c52 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001c42:	2008      	movs	r0, #8
 8001c44:	f000 f84c 	bl	8001ce0 <RCC_PLL_GetFreqDomain_SYS>
 8001c48:	6078      	str	r0, [r7, #4]
      break;
 8001c4a:	e002      	b.n	8001c52 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <RCC_GetSystemClockFreq+0x48>)
 8001c4e:	607b      	str	r3, [r7, #4]
      break;
 8001c50:	bf00      	nop
  }

  return frequency;
 8001c52:	687b      	ldr	r3, [r7, #4]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	017d7840 	.word	0x017d7840

08001c64 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c6c:	f7ff ff4a 	bl	8001b04 <LL_RCC_GetAHBPrescaler>
 8001c70:	4603      	mov	r3, r0
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <RCC_GetHCLKClockFreq+0x28>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	40d3      	lsrs	r3, r2
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	08002e04 	.word	0x08002e04

08001c90 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c98:	f7ff ff42 	bl	8001b20 <LL_RCC_GetAPB1Prescaler>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	40d3      	lsrs	r3, r2
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08002e14 	.word	0x08002e14

08001cb8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001cc0:	f7ff ff3c 	bl	8001b3c <LL_RCC_GetAPB2Prescaler>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <RCC_GetPCLK2ClockFreq+0x24>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	40d3      	lsrs	r3, r2
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	08002e14 	.word	0x08002e14

08001ce0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001cf4:	f7ff ff30 	bl	8001b58 <LL_RCC_PLL_GetMainSource>
 8001cf8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d06:	d003      	beq.n	8001d10 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001d08:	e005      	b.n	8001d16 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d0c:	617b      	str	r3, [r7, #20]
      break;
 8001d0e:	e005      	b.n	8001d1c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001d12:	617b      	str	r3, [r7, #20]
      break;
 8001d14:	e002      	b.n	8001d1c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d113      	bne.n	8001d4a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001d22:	f7ff ff43 	bl	8001bac <LL_RCC_PLL_GetDivider>
 8001d26:	4602      	mov	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fbb3 f4f2 	udiv	r4, r3, r2
 8001d2e:	f7ff ff21 	bl	8001b74 <LL_RCC_PLL_GetN>
 8001d32:	4603      	mov	r3, r0
 8001d34:	fb03 f404 	mul.w	r4, r3, r4
 8001d38:	f7ff ff2a 	bl	8001b90 <LL_RCC_PLL_GetP>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	3301      	adds	r3, #1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d48:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001d4a:	693b      	ldr	r3, [r7, #16]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	017d7840 	.word	0x017d7840

08001d5c <LL_SPI_IsEnabled>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6c:	2b40      	cmp	r3, #64	@ 0x40
 8001d6e:	d101      	bne.n	8001d74 <LL_SPI_IsEnabled+0x18>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <LL_SPI_IsEnabled+0x1a>
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_SPI_SetCRCPolynomial>:
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	611a      	str	r2, [r3, #16]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffd3 	bl	8001d5c <LL_SPI_IsEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d139      	bne.n	8001e30 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001dc4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6811      	ldr	r1, [r2, #0]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	6852      	ldr	r2, [r2, #4]
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	6892      	ldr	r2, [r2, #8]
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	68d2      	ldr	r2, [r2, #12]
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	6912      	ldr	r2, [r2, #16]
 8001de2:	4311      	orrs	r1, r2
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	6952      	ldr	r2, [r2, #20]
 8001de8:	4311      	orrs	r1, r2
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	6992      	ldr	r2, [r2, #24]
 8001dee:	4311      	orrs	r1, r2
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	69d2      	ldr	r2, [r2, #28]
 8001df4:	4311      	orrs	r1, r2
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	6a12      	ldr	r2, [r2, #32]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f023 0204 	bic.w	r2, r3, #4
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e1e:	d105      	bne.n	8001e2c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffab 	bl	8001d82 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	61da      	str	r2, [r3, #28]
  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <LL_USART_IsEnabled>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_USART_SetStopBitsLength>:
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_USART_SetHWFlowCtrl>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	615a      	str	r2, [r3, #20]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <LL_USART_SetBaudRate>:
{
 8001ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec0:	b0c0      	sub	sp, #256	@ 0x100
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ec8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001ecc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001edc:	f040 810c 	bne.w	80020f8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001ee0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001eea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	1891      	adds	r1, r2, r2
 8001ef8:	6639      	str	r1, [r7, #96]	@ 0x60
 8001efa:	415b      	adcs	r3, r3
 8001efc:	667b      	str	r3, [r7, #100]	@ 0x64
 8001efe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001f02:	4621      	mov	r1, r4
 8001f04:	eb12 0801 	adds.w	r8, r2, r1
 8001f08:	4629      	mov	r1, r5
 8001f0a:	eb43 0901 	adc.w	r9, r3, r1
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f22:	4690      	mov	r8, r2
 8001f24:	4699      	mov	r9, r3
 8001f26:	4623      	mov	r3, r4
 8001f28:	eb18 0303 	adds.w	r3, r8, r3
 8001f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f30:	462b      	mov	r3, r5
 8001f32:	eb49 0303 	adc.w	r3, r9, r3
 8001f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	469a      	mov	sl, r3
 8001f42:	4693      	mov	fp, r2
 8001f44:	eb1a 030a 	adds.w	r3, sl, sl
 8001f48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f4a:	eb4b 030b 	adc.w	r3, fp, fp
 8001f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f58:	f7fe f99a 	bl	8000290 <__aeabi_uldivmod>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4b64      	ldr	r3, [pc, #400]	@ (80020f4 <LL_USART_SetBaudRate+0x238>)
 8001f62:	fba3 2302 	umull	r2, r3, r3, r2
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	b29c      	uxth	r4, r3
 8001f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f78:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f7c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001f80:	4642      	mov	r2, r8
 8001f82:	464b      	mov	r3, r9
 8001f84:	1891      	adds	r1, r2, r2
 8001f86:	6539      	str	r1, [r7, #80]	@ 0x50
 8001f88:	415b      	adcs	r3, r3
 8001f8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f90:	4641      	mov	r1, r8
 8001f92:	1851      	adds	r1, r2, r1
 8001f94:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001f96:	4649      	mov	r1, r9
 8001f98:	414b      	adcs	r3, r1
 8001f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001fa8:	4659      	mov	r1, fp
 8001faa:	00cb      	lsls	r3, r1, #3
 8001fac:	4651      	mov	r1, sl
 8001fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fb2:	4651      	mov	r1, sl
 8001fb4:	00ca      	lsls	r2, r1, #3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	189b      	adds	r3, r3, r2
 8001fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fc4:	464b      	mov	r3, r9
 8001fc6:	460a      	mov	r2, r1
 8001fc8:	eb42 0303 	adc.w	r3, r2, r3
 8001fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001fd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001fda:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001fde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	18db      	adds	r3, r3, r3
 8001fe6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fe8:	4613      	mov	r3, r2
 8001fea:	eb42 0303 	adc.w	r3, r2, r3
 8001fee:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ff0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ff4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001ff8:	f7fe f94a 	bl	8000290 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4611      	mov	r1, r2
 8002002:	4b3c      	ldr	r3, [pc, #240]	@ (80020f4 <LL_USART_SetBaudRate+0x238>)
 8002004:	fba3 2301 	umull	r2, r3, r3, r1
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	2264      	movs	r2, #100	@ 0x64
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	1acb      	subs	r3, r1, r3
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002018:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <LL_USART_SetBaudRate+0x238>)
 800201a:	fba3 2302 	umull	r2, r3, r3, r2
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b29b      	uxth	r3, r3
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800202a:	b29b      	uxth	r3, r3
 800202c:	4423      	add	r3, r4
 800202e:	b29c      	uxth	r4, r3
 8002030:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002034:	2200      	movs	r2, #0
 8002036:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800203a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800203e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8002042:	4642      	mov	r2, r8
 8002044:	464b      	mov	r3, r9
 8002046:	1891      	adds	r1, r2, r2
 8002048:	63b9      	str	r1, [r7, #56]	@ 0x38
 800204a:	415b      	adcs	r3, r3
 800204c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800204e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002052:	4641      	mov	r1, r8
 8002054:	1851      	adds	r1, r2, r1
 8002056:	6339      	str	r1, [r7, #48]	@ 0x30
 8002058:	4649      	mov	r1, r9
 800205a:	414b      	adcs	r3, r1
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800206a:	4659      	mov	r1, fp
 800206c:	00cb      	lsls	r3, r1, #3
 800206e:	4651      	mov	r1, sl
 8002070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002074:	4651      	mov	r1, sl
 8002076:	00ca      	lsls	r2, r1, #3
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	4603      	mov	r3, r0
 800207e:	4642      	mov	r2, r8
 8002080:	189b      	adds	r3, r3, r2
 8002082:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002086:	464b      	mov	r3, r9
 8002088:	460a      	mov	r2, r1
 800208a:	eb42 0303 	adc.w	r3, r2, r3
 800208e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002096:	2200      	movs	r2, #0
 8002098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800209c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80020a0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80020a4:	460b      	mov	r3, r1
 80020a6:	18db      	adds	r3, r3, r3
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020aa:	4613      	mov	r3, r2
 80020ac:	eb42 0303 	adc.w	r3, r2, r3
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020b6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80020ba:	f7fe f8e9 	bl	8000290 <__aeabi_uldivmod>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <LL_USART_SetBaudRate+0x238>)
 80020c4:	fba3 1302 	umull	r1, r3, r3, r2
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	2164      	movs	r1, #100	@ 0x64
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	3332      	adds	r3, #50	@ 0x32
 80020d6:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <LL_USART_SetBaudRate+0x238>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4423      	add	r3, r4
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020f0:	609a      	str	r2, [r3, #8]
}
 80020f2:	e108      	b.n	8002306 <LL_USART_SetBaudRate+0x44a>
 80020f4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80020f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80020fc:	2200      	movs	r2, #0
 80020fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002102:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002106:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800210a:	4642      	mov	r2, r8
 800210c:	464b      	mov	r3, r9
 800210e:	1891      	adds	r1, r2, r2
 8002110:	6239      	str	r1, [r7, #32]
 8002112:	415b      	adcs	r3, r3
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
 8002116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800211a:	4641      	mov	r1, r8
 800211c:	1854      	adds	r4, r2, r1
 800211e:	4649      	mov	r1, r9
 8002120:	eb43 0501 	adc.w	r5, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	00eb      	lsls	r3, r5, #3
 800212e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002132:	00e2      	lsls	r2, r4, #3
 8002134:	4614      	mov	r4, r2
 8002136:	461d      	mov	r5, r3
 8002138:	4643      	mov	r3, r8
 800213a:	18e3      	adds	r3, r4, r3
 800213c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002140:	464b      	mov	r3, r9
 8002142:	eb45 0303 	adc.w	r3, r5, r3
 8002146:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800214a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002154:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002164:	4629      	mov	r1, r5
 8002166:	008b      	lsls	r3, r1, #2
 8002168:	4621      	mov	r1, r4
 800216a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800216e:	4621      	mov	r1, r4
 8002170:	008a      	lsls	r2, r1, #2
 8002172:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002176:	f7fe f88b 	bl	8000290 <__aeabi_uldivmod>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4b65      	ldr	r3, [pc, #404]	@ (8002314 <LL_USART_SetBaudRate+0x458>)
 8002180:	fba3 2302 	umull	r2, r3, r3, r2
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	b29b      	uxth	r3, r3
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	b29c      	uxth	r4, r3
 800218c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002190:	2200      	movs	r2, #0
 8002192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002196:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800219a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800219e:	4642      	mov	r2, r8
 80021a0:	464b      	mov	r3, r9
 80021a2:	1891      	adds	r1, r2, r2
 80021a4:	61b9      	str	r1, [r7, #24]
 80021a6:	415b      	adcs	r3, r3
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ae:	4641      	mov	r1, r8
 80021b0:	1851      	adds	r1, r2, r1
 80021b2:	6139      	str	r1, [r7, #16]
 80021b4:	4649      	mov	r1, r9
 80021b6:	414b      	adcs	r3, r1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021c6:	4659      	mov	r1, fp
 80021c8:	00cb      	lsls	r3, r1, #3
 80021ca:	4651      	mov	r1, sl
 80021cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021d0:	4651      	mov	r1, sl
 80021d2:	00ca      	lsls	r2, r1, #3
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	4603      	mov	r3, r0
 80021da:	4642      	mov	r2, r8
 80021dc:	189b      	adds	r3, r3, r2
 80021de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021e2:	464b      	mov	r3, r9
 80021e4:	460a      	mov	r2, r1
 80021e6:	eb42 0303 	adc.w	r3, r2, r3
 80021ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80021ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8002208:	4649      	mov	r1, r9
 800220a:	008b      	lsls	r3, r1, #2
 800220c:	4641      	mov	r1, r8
 800220e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002212:	4641      	mov	r1, r8
 8002214:	008a      	lsls	r2, r1, #2
 8002216:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800221a:	f7fe f839 	bl	8000290 <__aeabi_uldivmod>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4611      	mov	r1, r2
 8002224:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <LL_USART_SetBaudRate+0x458>)
 8002226:	fba3 2301 	umull	r2, r3, r3, r1
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2264      	movs	r2, #100	@ 0x64
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	1acb      	subs	r3, r1, r3
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	3332      	adds	r3, #50	@ 0x32
 8002238:	4a36      	ldr	r2, [pc, #216]	@ (8002314 <LL_USART_SetBaudRate+0x458>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	b29b      	uxth	r3, r3
 8002242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002246:	b29b      	uxth	r3, r3
 8002248:	4423      	add	r3, r4
 800224a:	b29c      	uxth	r4, r3
 800224c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002250:	2200      	movs	r2, #0
 8002252:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002254:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002256:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800225a:	4642      	mov	r2, r8
 800225c:	464b      	mov	r3, r9
 800225e:	1891      	adds	r1, r2, r2
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	415b      	adcs	r3, r3
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800226a:	4641      	mov	r1, r8
 800226c:	1851      	adds	r1, r2, r1
 800226e:	6039      	str	r1, [r7, #0]
 8002270:	4649      	mov	r1, r9
 8002272:	414b      	adcs	r3, r1
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002282:	4659      	mov	r1, fp
 8002284:	00cb      	lsls	r3, r1, #3
 8002286:	4651      	mov	r1, sl
 8002288:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800228c:	4651      	mov	r1, sl
 800228e:	00ca      	lsls	r2, r1, #3
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	4603      	mov	r3, r0
 8002296:	4642      	mov	r2, r8
 8002298:	189b      	adds	r3, r3, r2
 800229a:	673b      	str	r3, [r7, #112]	@ 0x70
 800229c:	464b      	mov	r3, r9
 800229e:	460a      	mov	r2, r1
 80022a0:	eb42 0303 	adc.w	r3, r2, r3
 80022a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80022a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80022aa:	2200      	movs	r2, #0
 80022ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80022bc:	4649      	mov	r1, r9
 80022be:	008b      	lsls	r3, r1, #2
 80022c0:	4641      	mov	r1, r8
 80022c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022c6:	4641      	mov	r1, r8
 80022c8:	008a      	lsls	r2, r1, #2
 80022ca:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80022ce:	f7fd ffdf 	bl	8000290 <__aeabi_uldivmod>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <LL_USART_SetBaudRate+0x458>)
 80022d8:	fba3 1302 	umull	r1, r3, r3, r2
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	2164      	movs	r1, #100	@ 0x64
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	3332      	adds	r3, #50	@ 0x32
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <LL_USART_SetBaudRate+0x458>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4423      	add	r3, r4
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002304:	609a      	str	r2, [r3, #8]
}
 8002306:	bf00      	nop
 8002308:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800230c:	46bd      	mov	sp, r7
 800230e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002312:	bf00      	nop
 8002314:	51eb851f 	.word	0x51eb851f

08002318 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fd8b 	bl	8001e46 <LL_USART_IsEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d149      	bne.n	80023ca <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800233e:	f023 030c 	bic.w	r3, r3, #12
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6851      	ldr	r1, [r2, #4]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	4311      	orrs	r1, r2
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	6912      	ldr	r2, [r2, #16]
 8002350:	4311      	orrs	r1, r2
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	6992      	ldr	r2, [r2, #24]
 8002356:	430a      	orrs	r2, r1
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fd82 	bl	8001e6e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fd8f 	bl	8001e94 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fc24 	bl	8001bc8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <LL_USART_Init+0xbc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d102      	bne.n	800238e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e00c      	b.n	80023a8 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a11      	ldr	r2, [pc, #68]	@ (80023d8 <LL_USART_Init+0xc0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d102      	bne.n	800239c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e005      	b.n	80023a8 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a0f      	ldr	r2, [pc, #60]	@ (80023dc <LL_USART_Init+0xc4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80023b6:	2300      	movs	r3, #0
 80023b8:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80023c2:	69b9      	ldr	r1, [r7, #24]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fd79 	bl	8001ebc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40011000 	.word	0x40011000
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40011400 	.word	0x40011400

080023e0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4a07      	ldr	r2, [pc, #28]	@ (8002410 <LL_InitTick+0x30>)
 80023f4:	3b01      	subs	r3, #1
 80023f6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <LL_InitTick+0x30>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <LL_InitTick+0x30>)
 8002400:	2205      	movs	r2, #5
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e010 	.word	0xe000e010

08002414 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800241c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffdd 	bl	80023e0 <LL_InitTick>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002438:	4a04      	ldr	r2, [pc, #16]	@ (800244c <LL_SetSystemCoreClock+0x1c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000000 	.word	0x20000000

08002450 <_vsniprintf_r>:
 8002450:	b530      	push	{r4, r5, lr}
 8002452:	4614      	mov	r4, r2
 8002454:	2c00      	cmp	r4, #0
 8002456:	b09b      	sub	sp, #108	@ 0x6c
 8002458:	4605      	mov	r5, r0
 800245a:	461a      	mov	r2, r3
 800245c:	da05      	bge.n	800246a <_vsniprintf_r+0x1a>
 800245e:	238b      	movs	r3, #139	@ 0x8b
 8002460:	6003      	str	r3, [r0, #0]
 8002462:	f04f 30ff 	mov.w	r0, #4294967295
 8002466:	b01b      	add	sp, #108	@ 0x6c
 8002468:	bd30      	pop	{r4, r5, pc}
 800246a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800246e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002472:	bf14      	ite	ne
 8002474:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002478:	4623      	moveq	r3, r4
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	9305      	str	r3, [sp, #20]
 800247e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002482:	9100      	str	r1, [sp, #0]
 8002484:	9104      	str	r1, [sp, #16]
 8002486:	f8ad 300e 	strh.w	r3, [sp, #14]
 800248a:	4669      	mov	r1, sp
 800248c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800248e:	f000 f9a1 	bl	80027d4 <_svfiprintf_r>
 8002492:	1c43      	adds	r3, r0, #1
 8002494:	bfbc      	itt	lt
 8002496:	238b      	movlt	r3, #139	@ 0x8b
 8002498:	602b      	strlt	r3, [r5, #0]
 800249a:	2c00      	cmp	r4, #0
 800249c:	d0e3      	beq.n	8002466 <_vsniprintf_r+0x16>
 800249e:	9b00      	ldr	r3, [sp, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e7df      	b.n	8002466 <_vsniprintf_r+0x16>
	...

080024a8 <vsniprintf>:
 80024a8:	b507      	push	{r0, r1, r2, lr}
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	460a      	mov	r2, r1
 80024b0:	4601      	mov	r1, r0
 80024b2:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <vsniprintf+0x18>)
 80024b4:	6800      	ldr	r0, [r0, #0]
 80024b6:	f7ff ffcb 	bl	8002450 <_vsniprintf_r>
 80024ba:	b003      	add	sp, #12
 80024bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c0:	20000004 	.word	0x20000004

080024c4 <memset>:
 80024c4:	4402      	add	r2, r0
 80024c6:	4603      	mov	r3, r0
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d100      	bne.n	80024ce <memset+0xa>
 80024cc:	4770      	bx	lr
 80024ce:	f803 1b01 	strb.w	r1, [r3], #1
 80024d2:	e7f9      	b.n	80024c8 <memset+0x4>

080024d4 <__errno>:
 80024d4:	4b01      	ldr	r3, [pc, #4]	@ (80024dc <__errno+0x8>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000004 	.word	0x20000004

080024e0 <__libc_init_array>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002518 <__libc_init_array+0x38>)
 80024e4:	4c0d      	ldr	r4, [pc, #52]	@ (800251c <__libc_init_array+0x3c>)
 80024e6:	1b64      	subs	r4, r4, r5
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	2600      	movs	r6, #0
 80024ec:	42a6      	cmp	r6, r4
 80024ee:	d109      	bne.n	8002504 <__libc_init_array+0x24>
 80024f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002520 <__libc_init_array+0x40>)
 80024f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002524 <__libc_init_array+0x44>)
 80024f4:	f000 fc66 	bl	8002dc4 <_init>
 80024f8:	1b64      	subs	r4, r4, r5
 80024fa:	10a4      	asrs	r4, r4, #2
 80024fc:	2600      	movs	r6, #0
 80024fe:	42a6      	cmp	r6, r4
 8002500:	d105      	bne.n	800250e <__libc_init_array+0x2e>
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	f855 3b04 	ldr.w	r3, [r5], #4
 8002508:	4798      	blx	r3
 800250a:	3601      	adds	r6, #1
 800250c:	e7ee      	b.n	80024ec <__libc_init_array+0xc>
 800250e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002512:	4798      	blx	r3
 8002514:	3601      	adds	r6, #1
 8002516:	e7f2      	b.n	80024fe <__libc_init_array+0x1e>
 8002518:	08002e58 	.word	0x08002e58
 800251c:	08002e58 	.word	0x08002e58
 8002520:	08002e58 	.word	0x08002e58
 8002524:	08002e5c 	.word	0x08002e5c

08002528 <__retarget_lock_acquire_recursive>:
 8002528:	4770      	bx	lr

0800252a <__retarget_lock_release_recursive>:
 800252a:	4770      	bx	lr

0800252c <_free_r>:
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	4605      	mov	r5, r0
 8002530:	2900      	cmp	r1, #0
 8002532:	d041      	beq.n	80025b8 <_free_r+0x8c>
 8002534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002538:	1f0c      	subs	r4, r1, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	bfb8      	it	lt
 800253e:	18e4      	addlt	r4, r4, r3
 8002540:	f000 f8e0 	bl	8002704 <__malloc_lock>
 8002544:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <_free_r+0x90>)
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	b933      	cbnz	r3, 8002558 <_free_r+0x2c>
 800254a:	6063      	str	r3, [r4, #4]
 800254c:	6014      	str	r4, [r2, #0]
 800254e:	4628      	mov	r0, r5
 8002550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002554:	f000 b8dc 	b.w	8002710 <__malloc_unlock>
 8002558:	42a3      	cmp	r3, r4
 800255a:	d908      	bls.n	800256e <_free_r+0x42>
 800255c:	6820      	ldr	r0, [r4, #0]
 800255e:	1821      	adds	r1, r4, r0
 8002560:	428b      	cmp	r3, r1
 8002562:	bf01      	itttt	eq
 8002564:	6819      	ldreq	r1, [r3, #0]
 8002566:	685b      	ldreq	r3, [r3, #4]
 8002568:	1809      	addeq	r1, r1, r0
 800256a:	6021      	streq	r1, [r4, #0]
 800256c:	e7ed      	b.n	800254a <_free_r+0x1e>
 800256e:	461a      	mov	r2, r3
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b10b      	cbz	r3, 8002578 <_free_r+0x4c>
 8002574:	42a3      	cmp	r3, r4
 8002576:	d9fa      	bls.n	800256e <_free_r+0x42>
 8002578:	6811      	ldr	r1, [r2, #0]
 800257a:	1850      	adds	r0, r2, r1
 800257c:	42a0      	cmp	r0, r4
 800257e:	d10b      	bne.n	8002598 <_free_r+0x6c>
 8002580:	6820      	ldr	r0, [r4, #0]
 8002582:	4401      	add	r1, r0
 8002584:	1850      	adds	r0, r2, r1
 8002586:	4283      	cmp	r3, r0
 8002588:	6011      	str	r1, [r2, #0]
 800258a:	d1e0      	bne.n	800254e <_free_r+0x22>
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	6053      	str	r3, [r2, #4]
 8002592:	4408      	add	r0, r1
 8002594:	6010      	str	r0, [r2, #0]
 8002596:	e7da      	b.n	800254e <_free_r+0x22>
 8002598:	d902      	bls.n	80025a0 <_free_r+0x74>
 800259a:	230c      	movs	r3, #12
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	e7d6      	b.n	800254e <_free_r+0x22>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	1821      	adds	r1, r4, r0
 80025a4:	428b      	cmp	r3, r1
 80025a6:	bf04      	itt	eq
 80025a8:	6819      	ldreq	r1, [r3, #0]
 80025aa:	685b      	ldreq	r3, [r3, #4]
 80025ac:	6063      	str	r3, [r4, #4]
 80025ae:	bf04      	itt	eq
 80025b0:	1809      	addeq	r1, r1, r0
 80025b2:	6021      	streq	r1, [r4, #0]
 80025b4:	6054      	str	r4, [r2, #4]
 80025b6:	e7ca      	b.n	800254e <_free_r+0x22>
 80025b8:	bd38      	pop	{r3, r4, r5, pc}
 80025ba:	bf00      	nop
 80025bc:	20000224 	.word	0x20000224

080025c0 <sbrk_aligned>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	4e0f      	ldr	r6, [pc, #60]	@ (8002600 <sbrk_aligned+0x40>)
 80025c4:	460c      	mov	r4, r1
 80025c6:	6831      	ldr	r1, [r6, #0]
 80025c8:	4605      	mov	r5, r0
 80025ca:	b911      	cbnz	r1, 80025d2 <sbrk_aligned+0x12>
 80025cc:	f000 fba6 	bl	8002d1c <_sbrk_r>
 80025d0:	6030      	str	r0, [r6, #0]
 80025d2:	4621      	mov	r1, r4
 80025d4:	4628      	mov	r0, r5
 80025d6:	f000 fba1 	bl	8002d1c <_sbrk_r>
 80025da:	1c43      	adds	r3, r0, #1
 80025dc:	d103      	bne.n	80025e6 <sbrk_aligned+0x26>
 80025de:	f04f 34ff 	mov.w	r4, #4294967295
 80025e2:	4620      	mov	r0, r4
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	1cc4      	adds	r4, r0, #3
 80025e8:	f024 0403 	bic.w	r4, r4, #3
 80025ec:	42a0      	cmp	r0, r4
 80025ee:	d0f8      	beq.n	80025e2 <sbrk_aligned+0x22>
 80025f0:	1a21      	subs	r1, r4, r0
 80025f2:	4628      	mov	r0, r5
 80025f4:	f000 fb92 	bl	8002d1c <_sbrk_r>
 80025f8:	3001      	adds	r0, #1
 80025fa:	d1f2      	bne.n	80025e2 <sbrk_aligned+0x22>
 80025fc:	e7ef      	b.n	80025de <sbrk_aligned+0x1e>
 80025fe:	bf00      	nop
 8002600:	20000220 	.word	0x20000220

08002604 <_malloc_r>:
 8002604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002608:	1ccd      	adds	r5, r1, #3
 800260a:	f025 0503 	bic.w	r5, r5, #3
 800260e:	3508      	adds	r5, #8
 8002610:	2d0c      	cmp	r5, #12
 8002612:	bf38      	it	cc
 8002614:	250c      	movcc	r5, #12
 8002616:	2d00      	cmp	r5, #0
 8002618:	4606      	mov	r6, r0
 800261a:	db01      	blt.n	8002620 <_malloc_r+0x1c>
 800261c:	42a9      	cmp	r1, r5
 800261e:	d904      	bls.n	800262a <_malloc_r+0x26>
 8002620:	230c      	movs	r3, #12
 8002622:	6033      	str	r3, [r6, #0]
 8002624:	2000      	movs	r0, #0
 8002626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800262a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002700 <_malloc_r+0xfc>
 800262e:	f000 f869 	bl	8002704 <__malloc_lock>
 8002632:	f8d8 3000 	ldr.w	r3, [r8]
 8002636:	461c      	mov	r4, r3
 8002638:	bb44      	cbnz	r4, 800268c <_malloc_r+0x88>
 800263a:	4629      	mov	r1, r5
 800263c:	4630      	mov	r0, r6
 800263e:	f7ff ffbf 	bl	80025c0 <sbrk_aligned>
 8002642:	1c43      	adds	r3, r0, #1
 8002644:	4604      	mov	r4, r0
 8002646:	d158      	bne.n	80026fa <_malloc_r+0xf6>
 8002648:	f8d8 4000 	ldr.w	r4, [r8]
 800264c:	4627      	mov	r7, r4
 800264e:	2f00      	cmp	r7, #0
 8002650:	d143      	bne.n	80026da <_malloc_r+0xd6>
 8002652:	2c00      	cmp	r4, #0
 8002654:	d04b      	beq.n	80026ee <_malloc_r+0xea>
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	4639      	mov	r1, r7
 800265a:	4630      	mov	r0, r6
 800265c:	eb04 0903 	add.w	r9, r4, r3
 8002660:	f000 fb5c 	bl	8002d1c <_sbrk_r>
 8002664:	4581      	cmp	r9, r0
 8002666:	d142      	bne.n	80026ee <_malloc_r+0xea>
 8002668:	6821      	ldr	r1, [r4, #0]
 800266a:	1a6d      	subs	r5, r5, r1
 800266c:	4629      	mov	r1, r5
 800266e:	4630      	mov	r0, r6
 8002670:	f7ff ffa6 	bl	80025c0 <sbrk_aligned>
 8002674:	3001      	adds	r0, #1
 8002676:	d03a      	beq.n	80026ee <_malloc_r+0xea>
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	442b      	add	r3, r5
 800267c:	6023      	str	r3, [r4, #0]
 800267e:	f8d8 3000 	ldr.w	r3, [r8]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	bb62      	cbnz	r2, 80026e0 <_malloc_r+0xdc>
 8002686:	f8c8 7000 	str.w	r7, [r8]
 800268a:	e00f      	b.n	80026ac <_malloc_r+0xa8>
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	1b52      	subs	r2, r2, r5
 8002690:	d420      	bmi.n	80026d4 <_malloc_r+0xd0>
 8002692:	2a0b      	cmp	r2, #11
 8002694:	d917      	bls.n	80026c6 <_malloc_r+0xc2>
 8002696:	1961      	adds	r1, r4, r5
 8002698:	42a3      	cmp	r3, r4
 800269a:	6025      	str	r5, [r4, #0]
 800269c:	bf18      	it	ne
 800269e:	6059      	strne	r1, [r3, #4]
 80026a0:	6863      	ldr	r3, [r4, #4]
 80026a2:	bf08      	it	eq
 80026a4:	f8c8 1000 	streq.w	r1, [r8]
 80026a8:	5162      	str	r2, [r4, r5]
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	4630      	mov	r0, r6
 80026ae:	f000 f82f 	bl	8002710 <__malloc_unlock>
 80026b2:	f104 000b 	add.w	r0, r4, #11
 80026b6:	1d23      	adds	r3, r4, #4
 80026b8:	f020 0007 	bic.w	r0, r0, #7
 80026bc:	1ac2      	subs	r2, r0, r3
 80026be:	bf1c      	itt	ne
 80026c0:	1a1b      	subne	r3, r3, r0
 80026c2:	50a3      	strne	r3, [r4, r2]
 80026c4:	e7af      	b.n	8002626 <_malloc_r+0x22>
 80026c6:	6862      	ldr	r2, [r4, #4]
 80026c8:	42a3      	cmp	r3, r4
 80026ca:	bf0c      	ite	eq
 80026cc:	f8c8 2000 	streq.w	r2, [r8]
 80026d0:	605a      	strne	r2, [r3, #4]
 80026d2:	e7eb      	b.n	80026ac <_malloc_r+0xa8>
 80026d4:	4623      	mov	r3, r4
 80026d6:	6864      	ldr	r4, [r4, #4]
 80026d8:	e7ae      	b.n	8002638 <_malloc_r+0x34>
 80026da:	463c      	mov	r4, r7
 80026dc:	687f      	ldr	r7, [r7, #4]
 80026de:	e7b6      	b.n	800264e <_malloc_r+0x4a>
 80026e0:	461a      	mov	r2, r3
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	d1fb      	bne.n	80026e0 <_malloc_r+0xdc>
 80026e8:	2300      	movs	r3, #0
 80026ea:	6053      	str	r3, [r2, #4]
 80026ec:	e7de      	b.n	80026ac <_malloc_r+0xa8>
 80026ee:	230c      	movs	r3, #12
 80026f0:	6033      	str	r3, [r6, #0]
 80026f2:	4630      	mov	r0, r6
 80026f4:	f000 f80c 	bl	8002710 <__malloc_unlock>
 80026f8:	e794      	b.n	8002624 <_malloc_r+0x20>
 80026fa:	6005      	str	r5, [r0, #0]
 80026fc:	e7d6      	b.n	80026ac <_malloc_r+0xa8>
 80026fe:	bf00      	nop
 8002700:	20000224 	.word	0x20000224

08002704 <__malloc_lock>:
 8002704:	4801      	ldr	r0, [pc, #4]	@ (800270c <__malloc_lock+0x8>)
 8002706:	f7ff bf0f 	b.w	8002528 <__retarget_lock_acquire_recursive>
 800270a:	bf00      	nop
 800270c:	2000021c 	.word	0x2000021c

08002710 <__malloc_unlock>:
 8002710:	4801      	ldr	r0, [pc, #4]	@ (8002718 <__malloc_unlock+0x8>)
 8002712:	f7ff bf0a 	b.w	800252a <__retarget_lock_release_recursive>
 8002716:	bf00      	nop
 8002718:	2000021c 	.word	0x2000021c

0800271c <__ssputs_r>:
 800271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	461f      	mov	r7, r3
 8002724:	42be      	cmp	r6, r7
 8002726:	680b      	ldr	r3, [r1, #0]
 8002728:	4682      	mov	sl, r0
 800272a:	460c      	mov	r4, r1
 800272c:	4690      	mov	r8, r2
 800272e:	d82d      	bhi.n	800278c <__ssputs_r+0x70>
 8002730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002734:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002738:	d026      	beq.n	8002788 <__ssputs_r+0x6c>
 800273a:	6965      	ldr	r5, [r4, #20]
 800273c:	6909      	ldr	r1, [r1, #16]
 800273e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002742:	eba3 0901 	sub.w	r9, r3, r1
 8002746:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800274a:	1c7b      	adds	r3, r7, #1
 800274c:	444b      	add	r3, r9
 800274e:	106d      	asrs	r5, r5, #1
 8002750:	429d      	cmp	r5, r3
 8002752:	bf38      	it	cc
 8002754:	461d      	movcc	r5, r3
 8002756:	0553      	lsls	r3, r2, #21
 8002758:	d527      	bpl.n	80027aa <__ssputs_r+0x8e>
 800275a:	4629      	mov	r1, r5
 800275c:	f7ff ff52 	bl	8002604 <_malloc_r>
 8002760:	4606      	mov	r6, r0
 8002762:	b360      	cbz	r0, 80027be <__ssputs_r+0xa2>
 8002764:	6921      	ldr	r1, [r4, #16]
 8002766:	464a      	mov	r2, r9
 8002768:	f000 fae8 	bl	8002d3c <memcpy>
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002776:	81a3      	strh	r3, [r4, #12]
 8002778:	6126      	str	r6, [r4, #16]
 800277a:	6165      	str	r5, [r4, #20]
 800277c:	444e      	add	r6, r9
 800277e:	eba5 0509 	sub.w	r5, r5, r9
 8002782:	6026      	str	r6, [r4, #0]
 8002784:	60a5      	str	r5, [r4, #8]
 8002786:	463e      	mov	r6, r7
 8002788:	42be      	cmp	r6, r7
 800278a:	d900      	bls.n	800278e <__ssputs_r+0x72>
 800278c:	463e      	mov	r6, r7
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	4632      	mov	r2, r6
 8002792:	4641      	mov	r1, r8
 8002794:	f000 faa8 	bl	8002ce8 <memmove>
 8002798:	68a3      	ldr	r3, [r4, #8]
 800279a:	1b9b      	subs	r3, r3, r6
 800279c:	60a3      	str	r3, [r4, #8]
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	4433      	add	r3, r6
 80027a2:	6023      	str	r3, [r4, #0]
 80027a4:	2000      	movs	r0, #0
 80027a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027aa:	462a      	mov	r2, r5
 80027ac:	f000 fad4 	bl	8002d58 <_realloc_r>
 80027b0:	4606      	mov	r6, r0
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d1e0      	bne.n	8002778 <__ssputs_r+0x5c>
 80027b6:	6921      	ldr	r1, [r4, #16]
 80027b8:	4650      	mov	r0, sl
 80027ba:	f7ff feb7 	bl	800252c <_free_r>
 80027be:	230c      	movs	r3, #12
 80027c0:	f8ca 3000 	str.w	r3, [sl]
 80027c4:	89a3      	ldrh	r3, [r4, #12]
 80027c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ca:	81a3      	strh	r3, [r4, #12]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	e7e9      	b.n	80027a6 <__ssputs_r+0x8a>
	...

080027d4 <_svfiprintf_r>:
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	4698      	mov	r8, r3
 80027da:	898b      	ldrh	r3, [r1, #12]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	b09d      	sub	sp, #116	@ 0x74
 80027e0:	4607      	mov	r7, r0
 80027e2:	460d      	mov	r5, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	d510      	bpl.n	800280a <_svfiprintf_r+0x36>
 80027e8:	690b      	ldr	r3, [r1, #16]
 80027ea:	b973      	cbnz	r3, 800280a <_svfiprintf_r+0x36>
 80027ec:	2140      	movs	r1, #64	@ 0x40
 80027ee:	f7ff ff09 	bl	8002604 <_malloc_r>
 80027f2:	6028      	str	r0, [r5, #0]
 80027f4:	6128      	str	r0, [r5, #16]
 80027f6:	b930      	cbnz	r0, 8002806 <_svfiprintf_r+0x32>
 80027f8:	230c      	movs	r3, #12
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	b01d      	add	sp, #116	@ 0x74
 8002802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002806:	2340      	movs	r3, #64	@ 0x40
 8002808:	616b      	str	r3, [r5, #20]
 800280a:	2300      	movs	r3, #0
 800280c:	9309      	str	r3, [sp, #36]	@ 0x24
 800280e:	2320      	movs	r3, #32
 8002810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002814:	f8cd 800c 	str.w	r8, [sp, #12]
 8002818:	2330      	movs	r3, #48	@ 0x30
 800281a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80029b8 <_svfiprintf_r+0x1e4>
 800281e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002822:	f04f 0901 	mov.w	r9, #1
 8002826:	4623      	mov	r3, r4
 8002828:	469a      	mov	sl, r3
 800282a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800282e:	b10a      	cbz	r2, 8002834 <_svfiprintf_r+0x60>
 8002830:	2a25      	cmp	r2, #37	@ 0x25
 8002832:	d1f9      	bne.n	8002828 <_svfiprintf_r+0x54>
 8002834:	ebba 0b04 	subs.w	fp, sl, r4
 8002838:	d00b      	beq.n	8002852 <_svfiprintf_r+0x7e>
 800283a:	465b      	mov	r3, fp
 800283c:	4622      	mov	r2, r4
 800283e:	4629      	mov	r1, r5
 8002840:	4638      	mov	r0, r7
 8002842:	f7ff ff6b 	bl	800271c <__ssputs_r>
 8002846:	3001      	adds	r0, #1
 8002848:	f000 80a7 	beq.w	800299a <_svfiprintf_r+0x1c6>
 800284c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800284e:	445a      	add	r2, fp
 8002850:	9209      	str	r2, [sp, #36]	@ 0x24
 8002852:	f89a 3000 	ldrb.w	r3, [sl]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 809f 	beq.w	800299a <_svfiprintf_r+0x1c6>
 800285c:	2300      	movs	r3, #0
 800285e:	f04f 32ff 	mov.w	r2, #4294967295
 8002862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002866:	f10a 0a01 	add.w	sl, sl, #1
 800286a:	9304      	str	r3, [sp, #16]
 800286c:	9307      	str	r3, [sp, #28]
 800286e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002872:	931a      	str	r3, [sp, #104]	@ 0x68
 8002874:	4654      	mov	r4, sl
 8002876:	2205      	movs	r2, #5
 8002878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800287c:	484e      	ldr	r0, [pc, #312]	@ (80029b8 <_svfiprintf_r+0x1e4>)
 800287e:	f7fd fcb7 	bl	80001f0 <memchr>
 8002882:	9a04      	ldr	r2, [sp, #16]
 8002884:	b9d8      	cbnz	r0, 80028be <_svfiprintf_r+0xea>
 8002886:	06d0      	lsls	r0, r2, #27
 8002888:	bf44      	itt	mi
 800288a:	2320      	movmi	r3, #32
 800288c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002890:	0711      	lsls	r1, r2, #28
 8002892:	bf44      	itt	mi
 8002894:	232b      	movmi	r3, #43	@ 0x2b
 8002896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800289a:	f89a 3000 	ldrb.w	r3, [sl]
 800289e:	2b2a      	cmp	r3, #42	@ 0x2a
 80028a0:	d015      	beq.n	80028ce <_svfiprintf_r+0xfa>
 80028a2:	9a07      	ldr	r2, [sp, #28]
 80028a4:	4654      	mov	r4, sl
 80028a6:	2000      	movs	r0, #0
 80028a8:	f04f 0c0a 	mov.w	ip, #10
 80028ac:	4621      	mov	r1, r4
 80028ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028b2:	3b30      	subs	r3, #48	@ 0x30
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	d94b      	bls.n	8002950 <_svfiprintf_r+0x17c>
 80028b8:	b1b0      	cbz	r0, 80028e8 <_svfiprintf_r+0x114>
 80028ba:	9207      	str	r2, [sp, #28]
 80028bc:	e014      	b.n	80028e8 <_svfiprintf_r+0x114>
 80028be:	eba0 0308 	sub.w	r3, r0, r8
 80028c2:	fa09 f303 	lsl.w	r3, r9, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	9304      	str	r3, [sp, #16]
 80028ca:	46a2      	mov	sl, r4
 80028cc:	e7d2      	b.n	8002874 <_svfiprintf_r+0xa0>
 80028ce:	9b03      	ldr	r3, [sp, #12]
 80028d0:	1d19      	adds	r1, r3, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	9103      	str	r1, [sp, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bfbb      	ittet	lt
 80028da:	425b      	neglt	r3, r3
 80028dc:	f042 0202 	orrlt.w	r2, r2, #2
 80028e0:	9307      	strge	r3, [sp, #28]
 80028e2:	9307      	strlt	r3, [sp, #28]
 80028e4:	bfb8      	it	lt
 80028e6:	9204      	strlt	r2, [sp, #16]
 80028e8:	7823      	ldrb	r3, [r4, #0]
 80028ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80028ec:	d10a      	bne.n	8002904 <_svfiprintf_r+0x130>
 80028ee:	7863      	ldrb	r3, [r4, #1]
 80028f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80028f2:	d132      	bne.n	800295a <_svfiprintf_r+0x186>
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	1d1a      	adds	r2, r3, #4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	9203      	str	r2, [sp, #12]
 80028fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002900:	3402      	adds	r4, #2
 8002902:	9305      	str	r3, [sp, #20]
 8002904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80029c8 <_svfiprintf_r+0x1f4>
 8002908:	7821      	ldrb	r1, [r4, #0]
 800290a:	2203      	movs	r2, #3
 800290c:	4650      	mov	r0, sl
 800290e:	f7fd fc6f 	bl	80001f0 <memchr>
 8002912:	b138      	cbz	r0, 8002924 <_svfiprintf_r+0x150>
 8002914:	9b04      	ldr	r3, [sp, #16]
 8002916:	eba0 000a 	sub.w	r0, r0, sl
 800291a:	2240      	movs	r2, #64	@ 0x40
 800291c:	4082      	lsls	r2, r0
 800291e:	4313      	orrs	r3, r2
 8002920:	3401      	adds	r4, #1
 8002922:	9304      	str	r3, [sp, #16]
 8002924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002928:	4824      	ldr	r0, [pc, #144]	@ (80029bc <_svfiprintf_r+0x1e8>)
 800292a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800292e:	2206      	movs	r2, #6
 8002930:	f7fd fc5e 	bl	80001f0 <memchr>
 8002934:	2800      	cmp	r0, #0
 8002936:	d036      	beq.n	80029a6 <_svfiprintf_r+0x1d2>
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <_svfiprintf_r+0x1ec>)
 800293a:	bb1b      	cbnz	r3, 8002984 <_svfiprintf_r+0x1b0>
 800293c:	9b03      	ldr	r3, [sp, #12]
 800293e:	3307      	adds	r3, #7
 8002940:	f023 0307 	bic.w	r3, r3, #7
 8002944:	3308      	adds	r3, #8
 8002946:	9303      	str	r3, [sp, #12]
 8002948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800294a:	4433      	add	r3, r6
 800294c:	9309      	str	r3, [sp, #36]	@ 0x24
 800294e:	e76a      	b.n	8002826 <_svfiprintf_r+0x52>
 8002950:	fb0c 3202 	mla	r2, ip, r2, r3
 8002954:	460c      	mov	r4, r1
 8002956:	2001      	movs	r0, #1
 8002958:	e7a8      	b.n	80028ac <_svfiprintf_r+0xd8>
 800295a:	2300      	movs	r3, #0
 800295c:	3401      	adds	r4, #1
 800295e:	9305      	str	r3, [sp, #20]
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 0c0a 	mov.w	ip, #10
 8002966:	4620      	mov	r0, r4
 8002968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800296c:	3a30      	subs	r2, #48	@ 0x30
 800296e:	2a09      	cmp	r2, #9
 8002970:	d903      	bls.n	800297a <_svfiprintf_r+0x1a6>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0c6      	beq.n	8002904 <_svfiprintf_r+0x130>
 8002976:	9105      	str	r1, [sp, #20]
 8002978:	e7c4      	b.n	8002904 <_svfiprintf_r+0x130>
 800297a:	fb0c 2101 	mla	r1, ip, r1, r2
 800297e:	4604      	mov	r4, r0
 8002980:	2301      	movs	r3, #1
 8002982:	e7f0      	b.n	8002966 <_svfiprintf_r+0x192>
 8002984:	ab03      	add	r3, sp, #12
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	462a      	mov	r2, r5
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <_svfiprintf_r+0x1f0>)
 800298c:	a904      	add	r1, sp, #16
 800298e:	4638      	mov	r0, r7
 8002990:	f3af 8000 	nop.w
 8002994:	1c42      	adds	r2, r0, #1
 8002996:	4606      	mov	r6, r0
 8002998:	d1d6      	bne.n	8002948 <_svfiprintf_r+0x174>
 800299a:	89ab      	ldrh	r3, [r5, #12]
 800299c:	065b      	lsls	r3, r3, #25
 800299e:	f53f af2d 	bmi.w	80027fc <_svfiprintf_r+0x28>
 80029a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029a4:	e72c      	b.n	8002800 <_svfiprintf_r+0x2c>
 80029a6:	ab03      	add	r3, sp, #12
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	462a      	mov	r2, r5
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <_svfiprintf_r+0x1f0>)
 80029ae:	a904      	add	r1, sp, #16
 80029b0:	4638      	mov	r0, r7
 80029b2:	f000 f879 	bl	8002aa8 <_printf_i>
 80029b6:	e7ed      	b.n	8002994 <_svfiprintf_r+0x1c0>
 80029b8:	08002e1c 	.word	0x08002e1c
 80029bc:	08002e26 	.word	0x08002e26
 80029c0:	00000000 	.word	0x00000000
 80029c4:	0800271d 	.word	0x0800271d
 80029c8:	08002e22 	.word	0x08002e22

080029cc <_printf_common>:
 80029cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d0:	4616      	mov	r6, r2
 80029d2:	4698      	mov	r8, r3
 80029d4:	688a      	ldr	r2, [r1, #8]
 80029d6:	690b      	ldr	r3, [r1, #16]
 80029d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029dc:	4293      	cmp	r3, r2
 80029de:	bfb8      	it	lt
 80029e0:	4613      	movlt	r3, r2
 80029e2:	6033      	str	r3, [r6, #0]
 80029e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029e8:	4607      	mov	r7, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	b10a      	cbz	r2, 80029f2 <_printf_common+0x26>
 80029ee:	3301      	adds	r3, #1
 80029f0:	6033      	str	r3, [r6, #0]
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	0699      	lsls	r1, r3, #26
 80029f6:	bf42      	ittt	mi
 80029f8:	6833      	ldrmi	r3, [r6, #0]
 80029fa:	3302      	addmi	r3, #2
 80029fc:	6033      	strmi	r3, [r6, #0]
 80029fe:	6825      	ldr	r5, [r4, #0]
 8002a00:	f015 0506 	ands.w	r5, r5, #6
 8002a04:	d106      	bne.n	8002a14 <_printf_common+0x48>
 8002a06:	f104 0a19 	add.w	sl, r4, #25
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	6832      	ldr	r2, [r6, #0]
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	42ab      	cmp	r3, r5
 8002a12:	dc26      	bgt.n	8002a62 <_printf_common+0x96>
 8002a14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a18:	6822      	ldr	r2, [r4, #0]
 8002a1a:	3b00      	subs	r3, #0
 8002a1c:	bf18      	it	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	0692      	lsls	r2, r2, #26
 8002a22:	d42b      	bmi.n	8002a7c <_printf_common+0xb0>
 8002a24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a28:	4641      	mov	r1, r8
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	47c8      	blx	r9
 8002a2e:	3001      	adds	r0, #1
 8002a30:	d01e      	beq.n	8002a70 <_printf_common+0xa4>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	6922      	ldr	r2, [r4, #16]
 8002a36:	f003 0306 	and.w	r3, r3, #6
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf02      	ittt	eq
 8002a3e:	68e5      	ldreq	r5, [r4, #12]
 8002a40:	6833      	ldreq	r3, [r6, #0]
 8002a42:	1aed      	subeq	r5, r5, r3
 8002a44:	68a3      	ldr	r3, [r4, #8]
 8002a46:	bf0c      	ite	eq
 8002a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a4c:	2500      	movne	r5, #0
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	bfc4      	itt	gt
 8002a52:	1a9b      	subgt	r3, r3, r2
 8002a54:	18ed      	addgt	r5, r5, r3
 8002a56:	2600      	movs	r6, #0
 8002a58:	341a      	adds	r4, #26
 8002a5a:	42b5      	cmp	r5, r6
 8002a5c:	d11a      	bne.n	8002a94 <_printf_common+0xc8>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e008      	b.n	8002a74 <_printf_common+0xa8>
 8002a62:	2301      	movs	r3, #1
 8002a64:	4652      	mov	r2, sl
 8002a66:	4641      	mov	r1, r8
 8002a68:	4638      	mov	r0, r7
 8002a6a:	47c8      	blx	r9
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d103      	bne.n	8002a78 <_printf_common+0xac>
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a78:	3501      	adds	r5, #1
 8002a7a:	e7c6      	b.n	8002a0a <_printf_common+0x3e>
 8002a7c:	18e1      	adds	r1, r4, r3
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	2030      	movs	r0, #48	@ 0x30
 8002a82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a86:	4422      	add	r2, r4
 8002a88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a90:	3302      	adds	r3, #2
 8002a92:	e7c7      	b.n	8002a24 <_printf_common+0x58>
 8002a94:	2301      	movs	r3, #1
 8002a96:	4622      	mov	r2, r4
 8002a98:	4641      	mov	r1, r8
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	47c8      	blx	r9
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d0e6      	beq.n	8002a70 <_printf_common+0xa4>
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7d9      	b.n	8002a5a <_printf_common+0x8e>
	...

08002aa8 <_printf_i>:
 8002aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	7e0f      	ldrb	r7, [r1, #24]
 8002aae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ab0:	2f78      	cmp	r7, #120	@ 0x78
 8002ab2:	4691      	mov	r9, r2
 8002ab4:	4680      	mov	r8, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	469a      	mov	sl, r3
 8002aba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002abe:	d807      	bhi.n	8002ad0 <_printf_i+0x28>
 8002ac0:	2f62      	cmp	r7, #98	@ 0x62
 8002ac2:	d80a      	bhi.n	8002ada <_printf_i+0x32>
 8002ac4:	2f00      	cmp	r7, #0
 8002ac6:	f000 80d2 	beq.w	8002c6e <_printf_i+0x1c6>
 8002aca:	2f58      	cmp	r7, #88	@ 0x58
 8002acc:	f000 80b9 	beq.w	8002c42 <_printf_i+0x19a>
 8002ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ad4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ad8:	e03a      	b.n	8002b50 <_printf_i+0xa8>
 8002ada:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ade:	2b15      	cmp	r3, #21
 8002ae0:	d8f6      	bhi.n	8002ad0 <_printf_i+0x28>
 8002ae2:	a101      	add	r1, pc, #4	@ (adr r1, 8002ae8 <_printf_i+0x40>)
 8002ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ae8:	08002b41 	.word	0x08002b41
 8002aec:	08002b55 	.word	0x08002b55
 8002af0:	08002ad1 	.word	0x08002ad1
 8002af4:	08002ad1 	.word	0x08002ad1
 8002af8:	08002ad1 	.word	0x08002ad1
 8002afc:	08002ad1 	.word	0x08002ad1
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002ad1 	.word	0x08002ad1
 8002b08:	08002ad1 	.word	0x08002ad1
 8002b0c:	08002ad1 	.word	0x08002ad1
 8002b10:	08002ad1 	.word	0x08002ad1
 8002b14:	08002c55 	.word	0x08002c55
 8002b18:	08002b7f 	.word	0x08002b7f
 8002b1c:	08002c0f 	.word	0x08002c0f
 8002b20:	08002ad1 	.word	0x08002ad1
 8002b24:	08002ad1 	.word	0x08002ad1
 8002b28:	08002c77 	.word	0x08002c77
 8002b2c:	08002ad1 	.word	0x08002ad1
 8002b30:	08002b7f 	.word	0x08002b7f
 8002b34:	08002ad1 	.word	0x08002ad1
 8002b38:	08002ad1 	.word	0x08002ad1
 8002b3c:	08002c17 	.word	0x08002c17
 8002b40:	6833      	ldr	r3, [r6, #0]
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6032      	str	r2, [r6, #0]
 8002b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b50:	2301      	movs	r3, #1
 8002b52:	e09d      	b.n	8002c90 <_printf_i+0x1e8>
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	6820      	ldr	r0, [r4, #0]
 8002b58:	1d19      	adds	r1, r3, #4
 8002b5a:	6031      	str	r1, [r6, #0]
 8002b5c:	0606      	lsls	r6, r0, #24
 8002b5e:	d501      	bpl.n	8002b64 <_printf_i+0xbc>
 8002b60:	681d      	ldr	r5, [r3, #0]
 8002b62:	e003      	b.n	8002b6c <_printf_i+0xc4>
 8002b64:	0645      	lsls	r5, r0, #25
 8002b66:	d5fb      	bpl.n	8002b60 <_printf_i+0xb8>
 8002b68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b6c:	2d00      	cmp	r5, #0
 8002b6e:	da03      	bge.n	8002b78 <_printf_i+0xd0>
 8002b70:	232d      	movs	r3, #45	@ 0x2d
 8002b72:	426d      	negs	r5, r5
 8002b74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b78:	4859      	ldr	r0, [pc, #356]	@ (8002ce0 <_printf_i+0x238>)
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	e011      	b.n	8002ba2 <_printf_i+0xfa>
 8002b7e:	6821      	ldr	r1, [r4, #0]
 8002b80:	6833      	ldr	r3, [r6, #0]
 8002b82:	0608      	lsls	r0, r1, #24
 8002b84:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b88:	d402      	bmi.n	8002b90 <_printf_i+0xe8>
 8002b8a:	0649      	lsls	r1, r1, #25
 8002b8c:	bf48      	it	mi
 8002b8e:	b2ad      	uxthmi	r5, r5
 8002b90:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b92:	4853      	ldr	r0, [pc, #332]	@ (8002ce0 <_printf_i+0x238>)
 8002b94:	6033      	str	r3, [r6, #0]
 8002b96:	bf14      	ite	ne
 8002b98:	230a      	movne	r3, #10
 8002b9a:	2308      	moveq	r3, #8
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ba2:	6866      	ldr	r6, [r4, #4]
 8002ba4:	60a6      	str	r6, [r4, #8]
 8002ba6:	2e00      	cmp	r6, #0
 8002ba8:	bfa2      	ittt	ge
 8002baa:	6821      	ldrge	r1, [r4, #0]
 8002bac:	f021 0104 	bicge.w	r1, r1, #4
 8002bb0:	6021      	strge	r1, [r4, #0]
 8002bb2:	b90d      	cbnz	r5, 8002bb8 <_printf_i+0x110>
 8002bb4:	2e00      	cmp	r6, #0
 8002bb6:	d04b      	beq.n	8002c50 <_printf_i+0x1a8>
 8002bb8:	4616      	mov	r6, r2
 8002bba:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bbe:	fb03 5711 	mls	r7, r3, r1, r5
 8002bc2:	5dc7      	ldrb	r7, [r0, r7]
 8002bc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bc8:	462f      	mov	r7, r5
 8002bca:	42bb      	cmp	r3, r7
 8002bcc:	460d      	mov	r5, r1
 8002bce:	d9f4      	bls.n	8002bba <_printf_i+0x112>
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d10b      	bne.n	8002bec <_printf_i+0x144>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	07df      	lsls	r7, r3, #31
 8002bd8:	d508      	bpl.n	8002bec <_printf_i+0x144>
 8002bda:	6923      	ldr	r3, [r4, #16]
 8002bdc:	6861      	ldr	r1, [r4, #4]
 8002bde:	4299      	cmp	r1, r3
 8002be0:	bfde      	ittt	le
 8002be2:	2330      	movle	r3, #48	@ 0x30
 8002be4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002be8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bec:	1b92      	subs	r2, r2, r6
 8002bee:	6122      	str	r2, [r4, #16]
 8002bf0:	f8cd a000 	str.w	sl, [sp]
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	aa03      	add	r2, sp, #12
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	f7ff fee6 	bl	80029cc <_printf_common>
 8002c00:	3001      	adds	r0, #1
 8002c02:	d14a      	bne.n	8002c9a <_printf_i+0x1f2>
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	b004      	add	sp, #16
 8002c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	4833      	ldr	r0, [pc, #204]	@ (8002ce4 <_printf_i+0x23c>)
 8002c18:	2778      	movs	r7, #120	@ 0x78
 8002c1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	6831      	ldr	r1, [r6, #0]
 8002c22:	061f      	lsls	r7, r3, #24
 8002c24:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c28:	d402      	bmi.n	8002c30 <_printf_i+0x188>
 8002c2a:	065f      	lsls	r7, r3, #25
 8002c2c:	bf48      	it	mi
 8002c2e:	b2ad      	uxthmi	r5, r5
 8002c30:	6031      	str	r1, [r6, #0]
 8002c32:	07d9      	lsls	r1, r3, #31
 8002c34:	bf44      	itt	mi
 8002c36:	f043 0320 	orrmi.w	r3, r3, #32
 8002c3a:	6023      	strmi	r3, [r4, #0]
 8002c3c:	b11d      	cbz	r5, 8002c46 <_printf_i+0x19e>
 8002c3e:	2310      	movs	r3, #16
 8002c40:	e7ac      	b.n	8002b9c <_printf_i+0xf4>
 8002c42:	4827      	ldr	r0, [pc, #156]	@ (8002ce0 <_printf_i+0x238>)
 8002c44:	e7e9      	b.n	8002c1a <_printf_i+0x172>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	f023 0320 	bic.w	r3, r3, #32
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	e7f6      	b.n	8002c3e <_printf_i+0x196>
 8002c50:	4616      	mov	r6, r2
 8002c52:	e7bd      	b.n	8002bd0 <_printf_i+0x128>
 8002c54:	6833      	ldr	r3, [r6, #0]
 8002c56:	6825      	ldr	r5, [r4, #0]
 8002c58:	6961      	ldr	r1, [r4, #20]
 8002c5a:	1d18      	adds	r0, r3, #4
 8002c5c:	6030      	str	r0, [r6, #0]
 8002c5e:	062e      	lsls	r6, r5, #24
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	d501      	bpl.n	8002c68 <_printf_i+0x1c0>
 8002c64:	6019      	str	r1, [r3, #0]
 8002c66:	e002      	b.n	8002c6e <_printf_i+0x1c6>
 8002c68:	0668      	lsls	r0, r5, #25
 8002c6a:	d5fb      	bpl.n	8002c64 <_printf_i+0x1bc>
 8002c6c:	8019      	strh	r1, [r3, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	6123      	str	r3, [r4, #16]
 8002c72:	4616      	mov	r6, r2
 8002c74:	e7bc      	b.n	8002bf0 <_printf_i+0x148>
 8002c76:	6833      	ldr	r3, [r6, #0]
 8002c78:	1d1a      	adds	r2, r3, #4
 8002c7a:	6032      	str	r2, [r6, #0]
 8002c7c:	681e      	ldr	r6, [r3, #0]
 8002c7e:	6862      	ldr	r2, [r4, #4]
 8002c80:	2100      	movs	r1, #0
 8002c82:	4630      	mov	r0, r6
 8002c84:	f7fd fab4 	bl	80001f0 <memchr>
 8002c88:	b108      	cbz	r0, 8002c8e <_printf_i+0x1e6>
 8002c8a:	1b80      	subs	r0, r0, r6
 8002c8c:	6060      	str	r0, [r4, #4]
 8002c8e:	6863      	ldr	r3, [r4, #4]
 8002c90:	6123      	str	r3, [r4, #16]
 8002c92:	2300      	movs	r3, #0
 8002c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c98:	e7aa      	b.n	8002bf0 <_printf_i+0x148>
 8002c9a:	6923      	ldr	r3, [r4, #16]
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	4640      	mov	r0, r8
 8002ca2:	47d0      	blx	sl
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d0ad      	beq.n	8002c04 <_printf_i+0x15c>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	079b      	lsls	r3, r3, #30
 8002cac:	d413      	bmi.n	8002cd6 <_printf_i+0x22e>
 8002cae:	68e0      	ldr	r0, [r4, #12]
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	4298      	cmp	r0, r3
 8002cb4:	bfb8      	it	lt
 8002cb6:	4618      	movlt	r0, r3
 8002cb8:	e7a6      	b.n	8002c08 <_printf_i+0x160>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	4640      	mov	r0, r8
 8002cc2:	47d0      	blx	sl
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d09d      	beq.n	8002c04 <_printf_i+0x15c>
 8002cc8:	3501      	adds	r5, #1
 8002cca:	68e3      	ldr	r3, [r4, #12]
 8002ccc:	9903      	ldr	r1, [sp, #12]
 8002cce:	1a5b      	subs	r3, r3, r1
 8002cd0:	42ab      	cmp	r3, r5
 8002cd2:	dcf2      	bgt.n	8002cba <_printf_i+0x212>
 8002cd4:	e7eb      	b.n	8002cae <_printf_i+0x206>
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	f104 0619 	add.w	r6, r4, #25
 8002cdc:	e7f5      	b.n	8002cca <_printf_i+0x222>
 8002cde:	bf00      	nop
 8002ce0:	08002e2d 	.word	0x08002e2d
 8002ce4:	08002e3e 	.word	0x08002e3e

08002ce8 <memmove>:
 8002ce8:	4288      	cmp	r0, r1
 8002cea:	b510      	push	{r4, lr}
 8002cec:	eb01 0402 	add.w	r4, r1, r2
 8002cf0:	d902      	bls.n	8002cf8 <memmove+0x10>
 8002cf2:	4284      	cmp	r4, r0
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	d807      	bhi.n	8002d08 <memmove+0x20>
 8002cf8:	1e43      	subs	r3, r0, #1
 8002cfa:	42a1      	cmp	r1, r4
 8002cfc:	d008      	beq.n	8002d10 <memmove+0x28>
 8002cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d06:	e7f8      	b.n	8002cfa <memmove+0x12>
 8002d08:	4402      	add	r2, r0
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	428a      	cmp	r2, r1
 8002d0e:	d100      	bne.n	8002d12 <memmove+0x2a>
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d1a:	e7f7      	b.n	8002d0c <memmove+0x24>

08002d1c <_sbrk_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4d06      	ldr	r5, [pc, #24]	@ (8002d38 <_sbrk_r+0x1c>)
 8002d20:	2300      	movs	r3, #0
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	602b      	str	r3, [r5, #0]
 8002d28:	f7fe fb88 	bl	800143c <_sbrk>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_sbrk_r+0x1a>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_sbrk_r+0x1a>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000218 	.word	0x20000218

08002d3c <memcpy>:
 8002d3c:	440a      	add	r2, r1
 8002d3e:	4291      	cmp	r1, r2
 8002d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d44:	d100      	bne.n	8002d48 <memcpy+0xc>
 8002d46:	4770      	bx	lr
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d52:	4291      	cmp	r1, r2
 8002d54:	d1f9      	bne.n	8002d4a <memcpy+0xe>
 8002d56:	bd10      	pop	{r4, pc}

08002d58 <_realloc_r>:
 8002d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d5c:	4680      	mov	r8, r0
 8002d5e:	4615      	mov	r5, r2
 8002d60:	460c      	mov	r4, r1
 8002d62:	b921      	cbnz	r1, 8002d6e <_realloc_r+0x16>
 8002d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d68:	4611      	mov	r1, r2
 8002d6a:	f7ff bc4b 	b.w	8002604 <_malloc_r>
 8002d6e:	b92a      	cbnz	r2, 8002d7c <_realloc_r+0x24>
 8002d70:	f7ff fbdc 	bl	800252c <_free_r>
 8002d74:	2400      	movs	r4, #0
 8002d76:	4620      	mov	r0, r4
 8002d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d7c:	f000 f81a 	bl	8002db4 <_malloc_usable_size_r>
 8002d80:	4285      	cmp	r5, r0
 8002d82:	4606      	mov	r6, r0
 8002d84:	d802      	bhi.n	8002d8c <_realloc_r+0x34>
 8002d86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002d8a:	d8f4      	bhi.n	8002d76 <_realloc_r+0x1e>
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	4640      	mov	r0, r8
 8002d90:	f7ff fc38 	bl	8002604 <_malloc_r>
 8002d94:	4607      	mov	r7, r0
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d0ec      	beq.n	8002d74 <_realloc_r+0x1c>
 8002d9a:	42b5      	cmp	r5, r6
 8002d9c:	462a      	mov	r2, r5
 8002d9e:	4621      	mov	r1, r4
 8002da0:	bf28      	it	cs
 8002da2:	4632      	movcs	r2, r6
 8002da4:	f7ff ffca 	bl	8002d3c <memcpy>
 8002da8:	4621      	mov	r1, r4
 8002daa:	4640      	mov	r0, r8
 8002dac:	f7ff fbbe 	bl	800252c <_free_r>
 8002db0:	463c      	mov	r4, r7
 8002db2:	e7e0      	b.n	8002d76 <_realloc_r+0x1e>

08002db4 <_malloc_usable_size_r>:
 8002db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002db8:	1f18      	subs	r0, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bfbc      	itt	lt
 8002dbe:	580b      	ldrlt	r3, [r1, r0]
 8002dc0:	18c0      	addlt	r0, r0, r3
 8002dc2:	4770      	bx	lr

08002dc4 <_init>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr

08002dd0 <_fini>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	bf00      	nop
 8002dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd6:	bc08      	pop	{r3}
 8002dd8:	469e      	mov	lr, r3
 8002dda:	4770      	bx	lr
